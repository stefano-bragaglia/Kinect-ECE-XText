/*
* generated by Xtext
*/
package org.xtext.ecerule.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EceGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EceModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EceModel");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//EceModel:
		//	statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventEventParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Assignment cContextsListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cContextsListContextsListParserRuleCall_2_0 = (RuleCall)cContextsListAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Statement:
		//	"on" event=Event contextsList=ContextsList ";";
		public ParserRule getRule() { return rule; }

		//"on" event=Event contextsList=ContextsList ";"
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//event=Event
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//Event
		public RuleCall getEventEventParserRuleCall_1_0() { return cEventEventParserRuleCall_1_0; }

		//contextsList=ContextsList
		public Assignment getContextsListAssignment_2() { return cContextsListAssignment_2; }

		//ContextsList
		public RuleCall getContextsListContextsListParserRuleCall_2_0() { return cContextsListContextsListParserRuleCall_2_0; }

		//";"
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEventNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEventNameIDTerminalRuleCall_0_0 = (RuleCall)cEventNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cParamsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cParamsEventFeatureParserRuleCall_1_1_0 = (RuleCall)cParamsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_2_0 = (Keyword)cGroup_1_2.eContents().get(0);
		private final Assignment cParamsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cParamsEventFeatureParserRuleCall_1_2_1_0 = (RuleCall)cParamsAssignment_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Event:
		//	eventName=ID ("(" params+=EventFeature ("," params+=EventFeature)* ")")?;
		public ParserRule getRule() { return rule; }

		//eventName=ID ("(" params+=EventFeature ("," params+=EventFeature)* ")")?
		public Group getGroup() { return cGroup; }

		//eventName=ID
		public Assignment getEventNameAssignment_0() { return cEventNameAssignment_0; }

		//ID
		public RuleCall getEventNameIDTerminalRuleCall_0_0() { return cEventNameIDTerminalRuleCall_0_0; }

		//("(" params+=EventFeature ("," params+=EventFeature)* ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//params+=EventFeature
		public Assignment getParamsAssignment_1_1() { return cParamsAssignment_1_1; }

		//EventFeature
		public RuleCall getParamsEventFeatureParserRuleCall_1_1_0() { return cParamsEventFeatureParserRuleCall_1_1_0; }

		//("," params+=EventFeature)*
		public Group getGroup_1_2() { return cGroup_1_2; }

		//","
		public Keyword getCommaKeyword_1_2_0() { return cCommaKeyword_1_2_0; }

		//params+=EventFeature
		public Assignment getParamsAssignment_1_2_1() { return cParamsAssignment_1_2_1; }

		//EventFeature
		public RuleCall getParamsEventFeatureParserRuleCall_1_2_1_0() { return cParamsEventFeatureParserRuleCall_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}

	public class EventFeatureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EventFeature");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//EventFeature:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ContextsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ContextsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEcContextsListAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEcContextsListEcContextsListParserRuleCall_0_0 = (RuleCall)cEcContextsListAssignment_0.eContents().get(0);
		private final Assignment cExpContextsListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpContextsListExpContextsListParserRuleCall_1_0 = (RuleCall)cExpContextsListAssignment_1.eContents().get(0);
		
		//ContextsList:
		//	ecContextsList=EcContextsList? expContextsList=ExpContextsList?;
		public ParserRule getRule() { return rule; }

		//ecContextsList=EcContextsList? expContextsList=ExpContextsList?
		public Group getGroup() { return cGroup; }

		//ecContextsList=EcContextsList?
		public Assignment getEcContextsListAssignment_0() { return cEcContextsListAssignment_0; }

		//EcContextsList
		public RuleCall getEcContextsListEcContextsListParserRuleCall_0_0() { return cEcContextsListEcContextsListParserRuleCall_0_0; }

		//expContextsList=ExpContextsList?
		public Assignment getExpContextsListAssignment_1() { return cExpContextsListAssignment_1; }

		//ExpContextsList
		public RuleCall getExpContextsListExpContextsListParserRuleCall_1_0() { return cExpContextsListExpContextsListParserRuleCall_1_0; }
	}

	public class EcContextsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EcContextsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEcContextsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEcContextsEcContextParserRuleCall_0_0 = (RuleCall)cEcContextsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEcContextsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEcContextsEcContextParserRuleCall_1_1_0 = (RuleCall)cEcContextsAssignment_1_1.eContents().get(0);
		
		//EcContextsList:
		//	ecContexts+=EcContext ("," ecContexts+=EcContext)*;
		public ParserRule getRule() { return rule; }

		//ecContexts+=EcContext ("," ecContexts+=EcContext)*
		public Group getGroup() { return cGroup; }

		//ecContexts+=EcContext
		public Assignment getEcContextsAssignment_0() { return cEcContextsAssignment_0; }

		//EcContext
		public RuleCall getEcContextsEcContextParserRuleCall_0_0() { return cEcContextsEcContextParserRuleCall_0_0; }

		//("," ecContexts+=EcContext)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//ecContexts+=EcContext
		public Assignment getEcContextsAssignment_1_1() { return cEcContextsAssignment_1_1; }

		//EcContext
		public RuleCall getEcContextsEcContextParserRuleCall_1_1_0() { return cEcContextsEcContextParserRuleCall_1_1_0; }
	}

	public class ExpContextsListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpContextsList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpContextsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpContextsExpContextParserRuleCall_0_0 = (RuleCall)cExpContextsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpContextsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpContextsExpContextParserRuleCall_1_1_0 = (RuleCall)cExpContextsAssignment_1_1.eContents().get(0);
		
		//ExpContextsList:
		//	expContexts+=ExpContext ("," expContexts+=ExpContext)*;
		public ParserRule getRule() { return rule; }

		//expContexts+=ExpContext ("," expContexts+=ExpContext)*
		public Group getGroup() { return cGroup; }

		//expContexts+=ExpContext
		public Assignment getExpContextsAssignment_0() { return cExpContextsAssignment_0; }

		//ExpContext
		public RuleCall getExpContextsExpContextParserRuleCall_0_0() { return cExpContextsExpContextParserRuleCall_0_0; }

		//("," expContexts+=ExpContext)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//expContexts+=ExpContext
		public Assignment getExpContextsAssignment_1_1() { return cExpContextsAssignment_1_1; }

		//ExpContext
		public RuleCall getExpContextsExpContextParserRuleCall_1_1_0() { return cExpContextsExpContextParserRuleCall_1_1_0; }
	}

	public class EcContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EcContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFluentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFluentFluentParserRuleCall_1_0 = (RuleCall)cFluentAssignment_1.eContents().get(0);
		
		//// EC CONTEXT ******************************************************************
		/// *(',' fluent+=Fluent)** / EcContext:
		//	"set" fluent+=Fluent;
		public ParserRule getRule() { return rule; }

		//"set" fluent+=Fluent
		public Group getGroup() { return cGroup; }

		//"set"
		public Keyword getSetKeyword_0() { return cSetKeyword_0; }

		//fluent+=Fluent
		public Assignment getFluentAssignment_1() { return cFluentAssignment_1; }

		//Fluent
		public RuleCall getFluentFluentParserRuleCall_1_0() { return cFluentFluentParserRuleCall_1_0; }
	}

	public class ExpContextElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpContext");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFinalConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFinalConditionConditionRuleParserRuleCall_1_0 = (RuleCall)cFinalConditionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cAllenOpAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cAllenOpAllenOpParserRuleCall_2_0_0 = (RuleCall)cAllenOpAssignment_2_0.eContents().get(0);
		private final Assignment cTimeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimeINTTerminalRuleCall_2_1_0 = (RuleCall)cTimeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialConditionAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialConditionConditionRuleParserRuleCall_3_1_0 = (RuleCall)cInitialConditionAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOnFulfKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cActionFAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cActionFIDTerminalRuleCall_4_1_0 = (RuleCall)cActionFAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOnViolKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActionVAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionVIDTerminalRuleCall_5_1_0 = (RuleCall)cActionVAssignment_5_1.eContents().get(0);
		
		//// EXP CONTEXT *****************************************************************
		//ExpContext:
		//	"expect" finalCondition=ConditionRule (allenOp=AllenOp time=INT)? ("if" initialCondition=ConditionRule)? ("onFulf"
		//	actionF=ID)? ("onViol" actionV=ID)?;
		public ParserRule getRule() { return rule; }

		//"expect" finalCondition=ConditionRule (allenOp=AllenOp time=INT)? ("if" initialCondition=ConditionRule)? ("onFulf"
		//actionF=ID)? ("onViol" actionV=ID)?
		public Group getGroup() { return cGroup; }

		//"expect"
		public Keyword getExpectKeyword_0() { return cExpectKeyword_0; }

		//finalCondition=ConditionRule
		public Assignment getFinalConditionAssignment_1() { return cFinalConditionAssignment_1; }

		//ConditionRule
		public RuleCall getFinalConditionConditionRuleParserRuleCall_1_0() { return cFinalConditionConditionRuleParserRuleCall_1_0; }

		//(allenOp=AllenOp time=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//allenOp=AllenOp
		public Assignment getAllenOpAssignment_2_0() { return cAllenOpAssignment_2_0; }

		//AllenOp
		public RuleCall getAllenOpAllenOpParserRuleCall_2_0_0() { return cAllenOpAllenOpParserRuleCall_2_0_0; }

		//time=INT
		public Assignment getTimeAssignment_2_1() { return cTimeAssignment_2_1; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_2_1_0() { return cTimeINTTerminalRuleCall_2_1_0; }

		//("if" initialCondition=ConditionRule)?
		public Group getGroup_3() { return cGroup_3; }

		//"if"
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }

		//initialCondition=ConditionRule
		public Assignment getInitialConditionAssignment_3_1() { return cInitialConditionAssignment_3_1; }

		//ConditionRule
		public RuleCall getInitialConditionConditionRuleParserRuleCall_3_1_0() { return cInitialConditionConditionRuleParserRuleCall_3_1_0; }

		//("onFulf" actionF=ID)?
		public Group getGroup_4() { return cGroup_4; }

		//"onFulf"
		public Keyword getOnFulfKeyword_4_0() { return cOnFulfKeyword_4_0; }

		//actionF=ID
		public Assignment getActionFAssignment_4_1() { return cActionFAssignment_4_1; }

		//ID
		public RuleCall getActionFIDTerminalRuleCall_4_1_0() { return cActionFIDTerminalRuleCall_4_1_0; }

		//("onViol" actionV=ID)?
		public Group getGroup_5() { return cGroup_5; }

		//"onViol"
		public Keyword getOnViolKeyword_5_0() { return cOnViolKeyword_5_0; }

		//actionV=ID
		public Assignment getActionVAssignment_5_1() { return cActionVAssignment_5_1; }

		//ID
		public RuleCall getActionVIDTerminalRuleCall_5_1_0() { return cActionVIDTerminalRuleCall_5_1_0; }
	}

	public class AllenOpElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AllenOp");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAllenOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cValueAlternatives_1_0 = (Alternatives)cValueAssignment_1.eContents().get(0);
		private final Keyword cValueBeforeKeyword_1_0_0 = (Keyword)cValueAlternatives_1_0.eContents().get(0);
		private final Keyword cValueAfterKeyword_1_0_1 = (Keyword)cValueAlternatives_1_0.eContents().get(1);
		private final Keyword cValueInKeyword_1_0_2 = (Keyword)cValueAlternatives_1_0.eContents().get(2);
		
		//AllenOp:
		//	{AllenOperator} value=("before" | "after" | "in");
		public ParserRule getRule() { return rule; }

		//{AllenOperator} value=("before" | "after" | "in")
		public Group getGroup() { return cGroup; }

		//{AllenOperator}
		public Action getAllenOperatorAction_0() { return cAllenOperatorAction_0; }

		//value=("before" | "after" | "in")
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"before" | "after" | "in"
		public Alternatives getValueAlternatives_1_0() { return cValueAlternatives_1_0; }

		//"before"
		public Keyword getValueBeforeKeyword_1_0_0() { return cValueBeforeKeyword_1_0_0; }

		//"after"
		public Keyword getValueAfterKeyword_1_0_1() { return cValueAfterKeyword_1_0_1; }

		//"in"
		public Keyword getValueInKeyword_1_0_2() { return cValueInKeyword_1_0_2; }
	}

	public class FluentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fluent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuePartAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuePartToRuleParserRuleCall_1_1_0 = (RuleCall)cValuePartAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIfKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cCondPartAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cCondPartConditionRuleParserRuleCall_2_1_0 = (RuleCall)cCondPartAssignment_2_1.eContents().get(0);
		
		//Fluent:
		//	name=ID ("to" valuePart=ToRule) //('in' timePart=InRule)?
		//	("if" condPart=ConditionRule)?;
		public ParserRule getRule() { return rule; }

		//name=ID ("to" valuePart=ToRule) //('in' timePart=InRule)?
		//("if" condPart=ConditionRule)?
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"to" valuePart=ToRule
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//valuePart=ToRule
		public Assignment getValuePartAssignment_1_1() { return cValuePartAssignment_1_1; }

		//ToRule
		public RuleCall getValuePartToRuleParserRuleCall_1_1_0() { return cValuePartToRuleParserRuleCall_1_1_0; }

		//("if" condPart=ConditionRule)?
		public Group getGroup_2() { return cGroup_2; }

		//"if"
		public Keyword getIfKeyword_2_0() { return cIfKeyword_2_0; }

		//condPart=ConditionRule
		public Assignment getCondPartAssignment_2_1() { return cCondPartAssignment_2_1; }

		//ConditionRule
		public RuleCall getCondPartConditionRuleParserRuleCall_2_1_0() { return cCondPartConditionRuleParserRuleCall_2_1_0; }
	}

	public class ToRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ToRule");
		private final Assignment cExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionMulOrDivParserRuleCall_0 = (RuleCall)cExpressionAssignment.eContents().get(0);
		
		//ToRule returns Expression:
		//	expression=MulOrDiv;
		public ParserRule getRule() { return rule; }

		//expression=MulOrDiv
		public Assignment getExpressionAssignment() { return cExpressionAssignment; }

		//MulOrDiv
		public RuleCall getExpressionMulOrDivParserRuleCall_0() { return cExpressionMulOrDivParserRuleCall_0; }
	}

	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAtomicParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv returns Expression:
		//	Atomic ({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Atomic)*;
		public ParserRule getRule() { return rule; }

		//Atomic ({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Atomic)*
		public Group getGroup() { return cGroup; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }

		//({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Atomic)*
		public Group getGroup_1() { return cGroup_1; }

		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }

		//op=("*" | "/" | "%" | "^")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"*" | "/" | "%" | "^"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }

		//"%"
		public Keyword getOpPercentSignKeyword_1_1_0_2() { return cOpPercentSignKeyword_1_1_0_2; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_1_0_3() { return cOpCircumflexAccentKeyword_1_1_0_3; }

		//right=Atomic
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Atomic
		public RuleCall getRightAtomicParserRuleCall_1_2_0() { return cRightAtomicParserRuleCall_1_2_0; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cFloatConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueFLOATTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cIntConstantAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cBoolConstantAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final Alternatives cValueAlternatives_2_1_0 = (Alternatives)cValueAssignment_2_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_2_1_0_0 = (Keyword)cValueAlternatives_2_1_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_2_1_0_1 = (Keyword)cValueAlternatives_2_1_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cReferenceAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Assignment cRefAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cRefReferenceTypeCrossReference_3_1_0 = (CrossReference)cRefAssignment_3_1.eContents().get(0);
		private final RuleCall cRefReferenceTypeIDTerminalRuleCall_3_1_0_1 = (RuleCall)cRefReferenceTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_3_2 = (Group)cGroup_3.eContents().get(2);
		private final Keyword cAtKeyword_3_2_0 = (Keyword)cGroup_3_2.eContents().get(0);
		private final Assignment cFluentValueSampleAssignment_3_2_1 = (Assignment)cGroup_3_2.eContents().get(1);
		private final RuleCall cFluentValueSampleAtTimePrimaryParserRuleCall_3_2_1_0 = (RuleCall)cFluentValueSampleAssignment_3_2_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cCurrentTimeAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Assignment cValueAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final Keyword cValueNowKeyword_4_1_0 = (Keyword)cValueAssignment_4_1.eContents().get(0);
		
		//Atomic:
		//	{FloatConstant} value=FLOAT | {IntConstant} value=INT | {BoolConstant} value=("true" | "false") | {Reference}
		//	ref=[ReferenceType] ("at" fluentValueSample=AtTimePrimary)? | {CurrentTime} value="now";
		public ParserRule getRule() { return rule; }

		//{FloatConstant} value=FLOAT | {IntConstant} value=INT | {BoolConstant} value=("true" | "false") | {Reference}
		//ref=[ReferenceType] ("at" fluentValueSample=AtTimePrimary)? | {CurrentTime} value="now"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{FloatConstant} value=FLOAT
		public Group getGroup_0() { return cGroup_0; }

		//{FloatConstant}
		public Action getFloatConstantAction_0_0() { return cFloatConstantAction_0_0; }

		//value=FLOAT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//FLOAT
		public RuleCall getValueFLOATTerminalRuleCall_0_1_0() { return cValueFLOATTerminalRuleCall_0_1_0; }

		//{IntConstant} value=INT
		public Group getGroup_1() { return cGroup_1; }

		//{IntConstant}
		public Action getIntConstantAction_1_0() { return cIntConstantAction_1_0; }

		//value=INT
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_1_0() { return cValueINTTerminalRuleCall_1_1_0; }

		//{BoolConstant} value=("true" | "false")
		public Group getGroup_2() { return cGroup_2; }

		//{BoolConstant}
		public Action getBoolConstantAction_2_0() { return cBoolConstantAction_2_0; }

		//value=("true" | "false")
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//"true" | "false"
		public Alternatives getValueAlternatives_2_1_0() { return cValueAlternatives_2_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_2_1_0_0() { return cValueTrueKeyword_2_1_0_0; }

		//"false"
		public Keyword getValueFalseKeyword_2_1_0_1() { return cValueFalseKeyword_2_1_0_1; }

		//{Reference} ref=[ReferenceType] ("at" fluentValueSample=AtTimePrimary)?
		public Group getGroup_3() { return cGroup_3; }

		//{Reference}
		public Action getReferenceAction_3_0() { return cReferenceAction_3_0; }

		//ref=[ReferenceType]
		public Assignment getRefAssignment_3_1() { return cRefAssignment_3_1; }

		//[ReferenceType]
		public CrossReference getRefReferenceTypeCrossReference_3_1_0() { return cRefReferenceTypeCrossReference_3_1_0; }

		//ID
		public RuleCall getRefReferenceTypeIDTerminalRuleCall_3_1_0_1() { return cRefReferenceTypeIDTerminalRuleCall_3_1_0_1; }

		//("at" fluentValueSample=AtTimePrimary)?
		public Group getGroup_3_2() { return cGroup_3_2; }

		//"at"
		public Keyword getAtKeyword_3_2_0() { return cAtKeyword_3_2_0; }

		//fluentValueSample=AtTimePrimary
		public Assignment getFluentValueSampleAssignment_3_2_1() { return cFluentValueSampleAssignment_3_2_1; }

		//AtTimePrimary
		public RuleCall getFluentValueSampleAtTimePrimaryParserRuleCall_3_2_1_0() { return cFluentValueSampleAtTimePrimaryParserRuleCall_3_2_1_0; }

		//{CurrentTime} value="now"
		public Group getGroup_4() { return cGroup_4; }

		//{CurrentTime}
		public Action getCurrentTimeAction_4_0() { return cCurrentTimeAction_4_0; }

		//value="now"
		public Assignment getValueAssignment_4_1() { return cValueAssignment_4_1; }

		//"now"
		public Keyword getValueNowKeyword_4_1_0() { return cValueNowKeyword_4_1_0; }
	}

	public class ReferenceTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReferenceType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEventFeatureParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFluentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ReferenceType:
		//	EventFeature | Fluent;
		public ParserRule getRule() { return rule; }

		//EventFeature | Fluent
		public Alternatives getAlternatives() { return cAlternatives; }

		//EventFeature
		public RuleCall getEventFeatureParserRuleCall_0() { return cEventFeatureParserRuleCall_0; }

		//Fluent
		public RuleCall getFluentParserRuleCall_1() { return cFluentParserRuleCall_1; }
	}

	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equality");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualityLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAtomicParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Equality:
		//	Atomic ({Equality.left=current} op=("==" | "!=") right=Atomic)*;
		public ParserRule getRule() { return rule; }

		//Atomic ({Equality.left=current} op=("==" | "!=") right=Atomic)*
		public Group getGroup() { return cGroup; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }

		//({Equality.left=current} op=("==" | "!=") right=Atomic)*
		public Group getGroup_1() { return cGroup_1; }

		//{Equality.left=current}
		public Action getEqualityLeftAction_1_0() { return cEqualityLeftAction_1_0; }

		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"==" | "!="
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_0_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_0_1; }

		//right=Atomic
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Atomic
		public RuleCall getRightAtomicParserRuleCall_1_2_0() { return cRightAtomicParserRuleCall_1_2_0; }
	}

	public class ConditionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionRule");
		private final Assignment cConditionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConditionEqualityParserRuleCall_0 = (RuleCall)cConditionAssignment.eContents().get(0);
		
		//ConditionRule:
		//	condition=Equality;
		public ParserRule getRule() { return rule; }

		//condition=Equality
		public Assignment getConditionAssignment() { return cConditionAssignment; }

		//Equality
		public RuleCall getConditionEqualityParserRuleCall_0() { return cConditionEqualityParserRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cOrParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////InRule:
		////	({Expression} expression=PlusOrMinus)
		////;
		//// LEFT_ASSOCIATIVITY
		//Expression:
		//	Or;
		public ParserRule getRule() { return rule; }

		//Or
		public RuleCall getOrParserRuleCall() { return cOrParserRuleCall; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or returns Expression:
		//	And ({Or.left=current} "OR" right=And)*;
		public ParserRule getRule() { return rule; }

		//And ({Or.left=current} "OR" right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} "OR" right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//And returns Expression:
		//	Equality ({And.left=current} "AND" right=Equality)*;
		public ParserRule getRule() { return rule; }

		//Equality ({And.left=current} "AND" right=Equality)*
		public Group getGroup() { return cGroup; }

		//Equality
		public RuleCall getEqualityParserRuleCall_0() { return cEqualityParserRuleCall_0; }

		//({And.left=current} "AND" right=Equality)*
		public Group getGroup_1() { return cGroup_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_0() { return cAndLeftAction_1_0; }

		//"AND"
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }

		//right=Equality
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Equality
		public RuleCall getRightEqualityParserRuleCall_1_2_0() { return cRightEqualityParserRuleCall_1_2_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression:
		//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
		public ParserRule getRule() { return rule; }

		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }

		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }

		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }

		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//">=" | "<=" | ">" | "<"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }

		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}

	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus returns Expression:
		//	MulOrDiv (({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*;
		public ParserRule getRule() { return rule; }

		//MulOrDiv (({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*
		public Group getGroup() { return cGroup; }

		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNotAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_2_0 = (RuleCall)cExpressionAssignment_1_2.eContents().get(0);
		private final RuleCall cAtomicParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Primary returns Expression:
		//	"(" Expression ")" | {Not} "!" expression=Primary | Atomic;
		public ParserRule getRule() { return rule; }

		//"(" Expression ")" | {Not} "!" expression=Primary | Atomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" Expression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//{Not} "!" expression=Primary
		public Group getGroup_1() { return cGroup_1; }

		//{Not}
		public Action getNotAction_1_0() { return cNotAction_1_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1() { return cExclamationMarkKeyword_1_1; }

		//expression=Primary
		public Assignment getExpressionAssignment_1_2() { return cExpressionAssignment_1_2; }

		//Primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_2_0() { return cExpressionPrimaryParserRuleCall_1_2_0; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_2() { return cAtomicParserRuleCall_2; }
	}

	public class FluentRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FluentRef");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//FluentRef:
		//	value=ID;
		public ParserRule getRule() { return rule; }

		//value=ID
		public Assignment getValueAssignment() { return cValueAssignment; }

		//ID
		public RuleCall getValueIDTerminalRuleCall_0() { return cValueIDTerminalRuleCall_0; }
	}

	public class AtTimeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtTimeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtTimePrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAtTimePlusOrMinLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpHyphenMinusKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpPlusSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAtTimePrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//// AT --> tempo del riferimento
		//AtTimeExpression returns AtExpr:
		//	AtTimePrimary ({AtTimePlusOrMin.left=current} op=("-" | "+") right=AtTimePrimary)*;
		public ParserRule getRule() { return rule; }

		//AtTimePrimary ({AtTimePlusOrMin.left=current} op=("-" | "+") right=AtTimePrimary)*
		public Group getGroup() { return cGroup; }

		//AtTimePrimary
		public RuleCall getAtTimePrimaryParserRuleCall_0() { return cAtTimePrimaryParserRuleCall_0; }

		//({AtTimePlusOrMin.left=current} op=("-" | "+") right=AtTimePrimary)*
		public Group getGroup_1() { return cGroup_1; }

		//{AtTimePlusOrMin.left=current}
		public Action getAtTimePlusOrMinLeftAction_1_0() { return cAtTimePlusOrMinLeftAction_1_0; }

		//op=("-" | "+")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"-" | "+"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"-"
		public Keyword getOpHyphenMinusKeyword_1_1_0_0() { return cOpHyphenMinusKeyword_1_1_0_0; }

		//"+"
		public Keyword getOpPlusSignKeyword_1_1_0_1() { return cOpPlusSignKeyword_1_1_0_1; }

		//right=AtTimePrimary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//AtTimePrimary
		public RuleCall getRightAtTimePrimaryParserRuleCall_1_2_0() { return cRightAtTimePrimaryParserRuleCall_1_2_0; }
	}

	public class AtTimePrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtTimePrimary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cAtTimeExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final RuleCall cAtTimeAtomicParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//AtTimePrimary returns AtExpr:
		//	"(" AtTimeExpression ")" | AtTimeAtomic;
		public ParserRule getRule() { return rule; }

		//"(" AtTimeExpression ")" | AtTimeAtomic
		public Alternatives getAlternatives() { return cAlternatives; }

		//"(" AtTimeExpression ")"
		public Group getGroup_0() { return cGroup_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }

		//AtTimeExpression
		public RuleCall getAtTimeExpressionParserRuleCall_0_1() { return cAtTimeExpressionParserRuleCall_0_1; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }

		//AtTimeAtomic
		public RuleCall getAtTimeAtomicParserRuleCall_1() { return cAtTimeAtomicParserRuleCall_1; }
	}

	public class AtTimeAtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AtTimeAtomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cAtTimeIntConstantAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cValueAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0_1_0 = (RuleCall)cValueAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cAtTimeCurrentTimeAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cAtTimeValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Keyword cAtTimeValueNowKeyword_1_1_0 = (Keyword)cAtTimeValueAssignment_1_1.eContents().get(0);
		
		////	|long
		//AtTimeAtomic returns AtExpr:
		//	{AtTimeIntConstant} / *('+'|'-')?* / value=INT | {AtTimeCurrentTime} atTimeValue="now";
		public ParserRule getRule() { return rule; }

		//{AtTimeIntConstant} / *('+'|'-')?* / value=INT | {AtTimeCurrentTime} atTimeValue="now"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{AtTimeIntConstant} / *('+'|'-')?* / value=INT
		public Group getGroup_0() { return cGroup_0; }

		//{AtTimeIntConstant}
		public Action getAtTimeIntConstantAction_0_0() { return cAtTimeIntConstantAction_0_0; }

		/// *('+'|'-')?* / value=INT
		public Assignment getValueAssignment_0_1() { return cValueAssignment_0_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0_1_0() { return cValueINTTerminalRuleCall_0_1_0; }

		//{AtTimeCurrentTime} atTimeValue="now"
		public Group getGroup_1() { return cGroup_1; }

		//{AtTimeCurrentTime}
		public Action getAtTimeCurrentTimeAction_1_0() { return cAtTimeCurrentTimeAction_1_0; }

		//atTimeValue="now"
		public Assignment getAtTimeValueAssignment_1_1() { return cAtTimeValueAssignment_1_1; }

		//"now"
		public Keyword getAtTimeValueNowKeyword_1_1_0() { return cAtTimeValueNowKeyword_1_1_0; }
	}
	
	
	private EceModelElements pEceModel;
	private StatementElements pStatement;
	private EventElements pEvent;
	private EventFeatureElements pEventFeature;
	private ContextsListElements pContextsList;
	private EcContextsListElements pEcContextsList;
	private ExpContextsListElements pExpContextsList;
	private EcContextElements pEcContext;
	private ExpContextElements pExpContext;
	private AllenOpElements pAllenOp;
	private FluentElements pFluent;
	private ToRuleElements pToRule;
	private MulOrDivElements pMulOrDiv;
	private AtomicElements pAtomic;
	private ReferenceTypeElements pReferenceType;
	private EqualityElements pEquality;
	private ConditionRuleElements pConditionRule;
	private ExpressionElements pExpression;
	private OrElements pOr;
	private AndElements pAnd;
	private ComparisonElements pComparison;
	private PlusOrMinusElements pPlusOrMinus;
	private PrimaryElements pPrimary;
	private FluentRefElements pFluentRef;
	private AtTimeExpressionElements pAtTimeExpression;
	private AtTimePrimaryElements pAtTimePrimary;
	private AtTimeAtomicElements pAtTimeAtomic;
	private TerminalRule tFLOAT;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EceGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.ecerule.Ece".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//EceModel:
	//	statements+=Statement*;
	public EceModelElements getEceModelAccess() {
		return (pEceModel != null) ? pEceModel : (pEceModel = new EceModelElements());
	}
	
	public ParserRule getEceModelRule() {
		return getEceModelAccess().getRule();
	}

	//Statement:
	//	"on" event=Event contextsList=ContextsList ";";
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Event:
	//	eventName=ID ("(" params+=EventFeature ("," params+=EventFeature)* ")")?;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//EventFeature:
	//	name=ID;
	public EventFeatureElements getEventFeatureAccess() {
		return (pEventFeature != null) ? pEventFeature : (pEventFeature = new EventFeatureElements());
	}
	
	public ParserRule getEventFeatureRule() {
		return getEventFeatureAccess().getRule();
	}

	//ContextsList:
	//	ecContextsList=EcContextsList? expContextsList=ExpContextsList?;
	public ContextsListElements getContextsListAccess() {
		return (pContextsList != null) ? pContextsList : (pContextsList = new ContextsListElements());
	}
	
	public ParserRule getContextsListRule() {
		return getContextsListAccess().getRule();
	}

	//EcContextsList:
	//	ecContexts+=EcContext ("," ecContexts+=EcContext)*;
	public EcContextsListElements getEcContextsListAccess() {
		return (pEcContextsList != null) ? pEcContextsList : (pEcContextsList = new EcContextsListElements());
	}
	
	public ParserRule getEcContextsListRule() {
		return getEcContextsListAccess().getRule();
	}

	//ExpContextsList:
	//	expContexts+=ExpContext ("," expContexts+=ExpContext)*;
	public ExpContextsListElements getExpContextsListAccess() {
		return (pExpContextsList != null) ? pExpContextsList : (pExpContextsList = new ExpContextsListElements());
	}
	
	public ParserRule getExpContextsListRule() {
		return getExpContextsListAccess().getRule();
	}

	//// EC CONTEXT ******************************************************************
	/// *(',' fluent+=Fluent)** / EcContext:
	//	"set" fluent+=Fluent;
	public EcContextElements getEcContextAccess() {
		return (pEcContext != null) ? pEcContext : (pEcContext = new EcContextElements());
	}
	
	public ParserRule getEcContextRule() {
		return getEcContextAccess().getRule();
	}

	//// EXP CONTEXT *****************************************************************
	//ExpContext:
	//	"expect" finalCondition=ConditionRule (allenOp=AllenOp time=INT)? ("if" initialCondition=ConditionRule)? ("onFulf"
	//	actionF=ID)? ("onViol" actionV=ID)?;
	public ExpContextElements getExpContextAccess() {
		return (pExpContext != null) ? pExpContext : (pExpContext = new ExpContextElements());
	}
	
	public ParserRule getExpContextRule() {
		return getExpContextAccess().getRule();
	}

	//AllenOp:
	//	{AllenOperator} value=("before" | "after" | "in");
	public AllenOpElements getAllenOpAccess() {
		return (pAllenOp != null) ? pAllenOp : (pAllenOp = new AllenOpElements());
	}
	
	public ParserRule getAllenOpRule() {
		return getAllenOpAccess().getRule();
	}

	//Fluent:
	//	name=ID ("to" valuePart=ToRule) //('in' timePart=InRule)?
	//	("if" condPart=ConditionRule)?;
	public FluentElements getFluentAccess() {
		return (pFluent != null) ? pFluent : (pFluent = new FluentElements());
	}
	
	public ParserRule getFluentRule() {
		return getFluentAccess().getRule();
	}

	//ToRule returns Expression:
	//	expression=MulOrDiv;
	public ToRuleElements getToRuleAccess() {
		return (pToRule != null) ? pToRule : (pToRule = new ToRuleElements());
	}
	
	public ParserRule getToRuleRule() {
		return getToRuleAccess().getRule();
	}

	//MulOrDiv returns Expression:
	//	Atomic ({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Atomic)*;
	public MulOrDivElements getMulOrDivAccess() {
		return (pMulOrDiv != null) ? pMulOrDiv : (pMulOrDiv = new MulOrDivElements());
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}

	//Atomic:
	//	{FloatConstant} value=FLOAT | {IntConstant} value=INT | {BoolConstant} value=("true" | "false") | {Reference}
	//	ref=[ReferenceType] ("at" fluentValueSample=AtTimePrimary)? | {CurrentTime} value="now";
	public AtomicElements getAtomicAccess() {
		return (pAtomic != null) ? pAtomic : (pAtomic = new AtomicElements());
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//ReferenceType:
	//	EventFeature | Fluent;
	public ReferenceTypeElements getReferenceTypeAccess() {
		return (pReferenceType != null) ? pReferenceType : (pReferenceType = new ReferenceTypeElements());
	}
	
	public ParserRule getReferenceTypeRule() {
		return getReferenceTypeAccess().getRule();
	}

	//Equality:
	//	Atomic ({Equality.left=current} op=("==" | "!=") right=Atomic)*;
	public EqualityElements getEqualityAccess() {
		return (pEquality != null) ? pEquality : (pEquality = new EqualityElements());
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}

	//ConditionRule:
	//	condition=Equality;
	public ConditionRuleElements getConditionRuleAccess() {
		return (pConditionRule != null) ? pConditionRule : (pConditionRule = new ConditionRuleElements());
	}
	
	public ParserRule getConditionRuleRule() {
		return getConditionRuleAccess().getRule();
	}

	////InRule:
	////	({Expression} expression=PlusOrMinus)
	////;
	//// LEFT_ASSOCIATIVITY
	//Expression:
	//	Or;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Or returns Expression:
	//	And ({Or.left=current} "OR" right=And)*;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	//And returns Expression:
	//	Equality ({And.left=current} "AND" right=Equality)*;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Comparison returns Expression:
	//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//PlusOrMinus returns Expression:
	//	MulOrDiv (({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return (pPlusOrMinus != null) ? pPlusOrMinus : (pPlusOrMinus = new PlusOrMinusElements());
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}

	//Primary returns Expression:
	//	"(" Expression ")" | {Not} "!" expression=Primary | Atomic;
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//FluentRef:
	//	value=ID;
	public FluentRefElements getFluentRefAccess() {
		return (pFluentRef != null) ? pFluentRef : (pFluentRef = new FluentRefElements());
	}
	
	public ParserRule getFluentRefRule() {
		return getFluentRefAccess().getRule();
	}

	//// AT --> tempo del riferimento
	//AtTimeExpression returns AtExpr:
	//	AtTimePrimary ({AtTimePlusOrMin.left=current} op=("-" | "+") right=AtTimePrimary)*;
	public AtTimeExpressionElements getAtTimeExpressionAccess() {
		return (pAtTimeExpression != null) ? pAtTimeExpression : (pAtTimeExpression = new AtTimeExpressionElements());
	}
	
	public ParserRule getAtTimeExpressionRule() {
		return getAtTimeExpressionAccess().getRule();
	}

	//AtTimePrimary returns AtExpr:
	//	"(" AtTimeExpression ")" | AtTimeAtomic;
	public AtTimePrimaryElements getAtTimePrimaryAccess() {
		return (pAtTimePrimary != null) ? pAtTimePrimary : (pAtTimePrimary = new AtTimePrimaryElements());
	}
	
	public ParserRule getAtTimePrimaryRule() {
		return getAtTimePrimaryAccess().getRule();
	}

	////	|long
	//AtTimeAtomic returns AtExpr:
	//	{AtTimeIntConstant} / *('+'|'-')?* / value=INT | {AtTimeCurrentTime} atTimeValue="now";
	public AtTimeAtomicElements getAtTimeAtomicAccess() {
		return (pAtTimeAtomic != null) ? pAtTimeAtomic : (pAtTimeAtomic = new AtTimeAtomicElements());
	}
	
	public ParserRule getAtTimeAtomicRule() {
		return getAtTimeAtomicAccess().getRule();
	}

	//// IN --> tempo settaggio evento o verifica dell'aspettativa
	////
	////InExpr:
	////	InTimeExpression;
	////
	////InTimeExpression returns InExpr:
	////	InTimePrimary ({InTimePlusOrMin.left=current} op=('-' | '+')
	////	right=InTimePrimary)*;
	////
	////InTimePrimary returns InExpr:
	////	'(' InExpr ')' |
	////	InTimeAtomic;
	////
	////InTimeAtomic returns InExpr:
	////	{InTimeIntConstant} / *('+'|'-')?* / value=INT
	////	| {InTimeCurrentTime} inTimeValue='now'
	////	//	|long
	////;
	//terminal FLOAT returns ecore::EFloat:
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
