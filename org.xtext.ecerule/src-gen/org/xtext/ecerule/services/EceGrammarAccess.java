/*
* generated by Xtext
*/
package org.xtext.ecerule.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class EceGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DroolsModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DroolsModel");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//DroolsModel:
		//	statements+=Statement*;
		public ParserRule getRule() { return rule; }

		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }

		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEventAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEventEventParserRuleCall_1_0 = (RuleCall)cEventAssignment_1.eContents().get(0);
		private final Keyword cSetKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFluentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFluentFluentParserRuleCall_3_0 = (RuleCall)cFluentAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFluentAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFluentFluentParserRuleCall_4_1_0 = (RuleCall)cFluentAssignment_4_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Statement:
		//	"on" event=Event "set" fluent+=Fluent ("," fluent+=Fluent)* / *('expect' exp+=ExpFluent (',' exp+=ExpFluent)*)? * /
		//	";";
		public ParserRule getRule() { return rule; }

		//"on" event=Event "set" fluent+=Fluent ("," fluent+=Fluent)* / *('expect' exp+=ExpFluent (',' exp+=ExpFluent)*)? * / ";"
		public Group getGroup() { return cGroup; }

		//"on"
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }

		//event=Event
		public Assignment getEventAssignment_1() { return cEventAssignment_1; }

		//Event
		public RuleCall getEventEventParserRuleCall_1_0() { return cEventEventParserRuleCall_1_0; }

		//"set"
		public Keyword getSetKeyword_2() { return cSetKeyword_2; }

		//fluent+=Fluent
		public Assignment getFluentAssignment_3() { return cFluentAssignment_3; }

		//Fluent
		public RuleCall getFluentFluentParserRuleCall_3_0() { return cFluentFluentParserRuleCall_3_0; }

		//("," fluent+=Fluent)*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//fluent+=Fluent
		public Assignment getFluentAssignment_4_1() { return cFluentAssignment_4_1; }

		//Fluent
		public RuleCall getFluentFluentParserRuleCall_4_1_0() { return cFluentFluentParserRuleCall_4_1_0; }

		/// *('expect' exp+=ExpFluent (',' exp+=ExpFluent)*)? * / ";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Assignment cEventNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cEventNameIDTerminalRuleCall_0 = (RuleCall)cEventNameAssignment.eContents().get(0);
		
		//Event:
		//	eventName=ID;
		public ParserRule getRule() { return rule; }

		//eventName=ID
		public Assignment getEventNameAssignment() { return cEventNameAssignment; }

		//ID
		public RuleCall getEventNameIDTerminalRuleCall_0() { return cEventNameIDTerminalRuleCall_0; }
	}

	public class FluentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fluent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFluentNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFluentNameIDTerminalRuleCall_0_0 = (RuleCall)cFluentNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cToKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cValuePartAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValuePartToRuleParserRuleCall_1_1_0 = (RuleCall)cValuePartAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cInKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cTimePartAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTimePartInRuleParserRuleCall_2_1_0 = (RuleCall)cTimePartAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIfKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCondPartAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCondPartConditionRuleParserRuleCall_3_1_0 = (RuleCall)cCondPartAssignment_3_1.eContents().get(0);
		
		//Fluent:
		//	fluentName=ID ("to" valuePart=ToRule) ("in" timePart=InRule)? ("if" condPart=ConditionRule)?;
		public ParserRule getRule() { return rule; }

		//fluentName=ID ("to" valuePart=ToRule) ("in" timePart=InRule)? ("if" condPart=ConditionRule)?
		public Group getGroup() { return cGroup; }

		//fluentName=ID
		public Assignment getFluentNameAssignment_0() { return cFluentNameAssignment_0; }

		//ID
		public RuleCall getFluentNameIDTerminalRuleCall_0_0() { return cFluentNameIDTerminalRuleCall_0_0; }

		//"to" valuePart=ToRule
		public Group getGroup_1() { return cGroup_1; }

		//"to"
		public Keyword getToKeyword_1_0() { return cToKeyword_1_0; }

		//valuePart=ToRule
		public Assignment getValuePartAssignment_1_1() { return cValuePartAssignment_1_1; }

		//ToRule
		public RuleCall getValuePartToRuleParserRuleCall_1_1_0() { return cValuePartToRuleParserRuleCall_1_1_0; }

		//("in" timePart=InRule)?
		public Group getGroup_2() { return cGroup_2; }

		//"in"
		public Keyword getInKeyword_2_0() { return cInKeyword_2_0; }

		//timePart=InRule
		public Assignment getTimePartAssignment_2_1() { return cTimePartAssignment_2_1; }

		//InRule
		public RuleCall getTimePartInRuleParserRuleCall_2_1_0() { return cTimePartInRuleParserRuleCall_2_1_0; }

		//("if" condPart=ConditionRule)?
		public Group getGroup_3() { return cGroup_3; }

		//"if"
		public Keyword getIfKeyword_3_0() { return cIfKeyword_3_0; }

		//condPart=ConditionRule
		public Assignment getCondPartAssignment_3_1() { return cCondPartAssignment_3_1; }

		//ConditionRule
		public RuleCall getCondPartConditionRuleParserRuleCall_3_1_0() { return cCondPartConditionRuleParserRuleCall_3_1_0; }
	}

	public class ToRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ToRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionStringExprParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionBoolExprParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Assignment cExpressionAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExpressionSwitchExprParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Assignment cExpressionAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cExpressionFloatExprParserRuleCall_3_0_0 = (RuleCall)cExpressionAssignment_3_0.eContents().get(0);
		private final Assignment cExpressionAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cExpressionMutationExprParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		////TO RULE ******************************************************************
		//ToRule:
		//	expression=StringExpr //switch BoolExpr
		//	//mutation FloatExpr
		//	| => expression=BoolExpr | expression=switchExpr | => (expression=FloatExpr) | expression=MutationExpr;
		public ParserRule getRule() { return rule; }

		//expression=StringExpr //switch BoolExpr
		////mutation FloatExpr
		//| => expression=BoolExpr | expression=switchExpr | => (expression=FloatExpr) | expression=MutationExpr
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression=StringExpr
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//StringExpr
		public RuleCall getExpressionStringExprParserRuleCall_0_0() { return cExpressionStringExprParserRuleCall_0_0; }

		//=> expression=BoolExpr
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//BoolExpr
		public RuleCall getExpressionBoolExprParserRuleCall_1_0() { return cExpressionBoolExprParserRuleCall_1_0; }

		//expression=switchExpr
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }

		//switchExpr
		public RuleCall getExpressionSwitchExprParserRuleCall_2_0() { return cExpressionSwitchExprParserRuleCall_2_0; }

		//=> (expression=FloatExpr)
		public Group getGroup_3() { return cGroup_3; }

		//expression=FloatExpr
		public Assignment getExpressionAssignment_3_0() { return cExpressionAssignment_3_0; }

		//FloatExpr
		public RuleCall getExpressionFloatExprParserRuleCall_3_0_0() { return cExpressionFloatExprParserRuleCall_3_0_0; }

		//expression=MutationExpr
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//MutationExpr
		public RuleCall getExpressionMutationExprParserRuleCall_4_0() { return cExpressionMutationExprParserRuleCall_4_0; }
	}

	public class StringExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cStrParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFluentWhoseValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//StringExpr:
		//	Str | FluentWhoseValue;
		public ParserRule getRule() { return rule; }

		//Str | FluentWhoseValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//Str
		public RuleCall getStrParserRuleCall_0() { return cStrParserRuleCall_0; }

		//FluentWhoseValue
		public RuleCall getFluentWhoseValueParserRuleCall_1() { return cFluentWhoseValueParserRuleCall_1; }
	}

	public class BoolExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cValueFalseKeyword_1_0 = (Keyword)cValueAssignment_1.eContents().get(0);
		private final RuleCall cOrParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BoolExpr:
		//	value="true" | value="false" | Or;
		public ParserRule getRule() { return rule; }

		//value="true" | value="false" | Or
		public Alternatives getAlternatives() { return cAlternatives; }

		//value="true"
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//"true"
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }

		//value="false"
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//"false"
		public Keyword getValueFalseKeyword_1_0() { return cValueFalseKeyword_1_0; }

		//Or
		public RuleCall getOrParserRuleCall_2() { return cOrParserRuleCall_2; }
	}

	public class OrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Or");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Or:
		//	And ({Or.left=current} "OR" right=And)*;
		public ParserRule getRule() { return rule; }

		//And ({Or.left=current} "OR" right=And)*
		public Group getGroup() { return cGroup; }

		//And
		public RuleCall getAndParserRuleCall_0() { return cAndParserRuleCall_0; }

		//({Or.left=current} "OR" right=And)*
		public Group getGroup_1() { return cGroup_1; }

		//{Or.left=current}
		public Action getOrLeftAction_1_0() { return cOrLeftAction_1_0; }

		//"OR"
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }

		//right=And
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//And
		public RuleCall getRightAndParserRuleCall_1_2_0() { return cRightAndParserRuleCall_1_2_0; }
	}

	public class AndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "And");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cEqualityParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cAndLeftAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Keyword cANDKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cRightAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_0_1_2_0 = (RuleCall)cRightAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cEqualityParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cAndLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1_1 = (Keyword)cGroup_1_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final RuleCall cComparisonParserRuleCall_2_0 = (RuleCall)cGroup_2.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Action cAndLeftAction_2_1_0 = (Action)cGroup_2_1.eContents().get(0);
		private final Keyword cANDKeyword_2_1_1 = (Keyword)cGroup_2_1.eContents().get(1);
		private final Assignment cRightAssignment_2_1_2 = (Assignment)cGroup_2_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_2_1_2_0 = (RuleCall)cRightAssignment_2_1_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final RuleCall cComparisonParserRuleCall_3_0 = (RuleCall)cGroup_3.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Action cAndLeftAction_3_1_0 = (Action)cGroup_3_1.eContents().get(0);
		private final Keyword cANDKeyword_3_1_1 = (Keyword)cGroup_3_1.eContents().get(1);
		private final Assignment cRightAssignment_3_1_2 = (Assignment)cGroup_3_1.eContents().get(2);
		private final RuleCall cRightEqualityParserRuleCall_3_1_2_0 = (RuleCall)cRightAssignment_3_1_2.eContents().get(0);
		
		////	|=>Equality ({And.left=current} "AND" right=BoolExpr)* 
		////	|=>Comparison ({And.left=current} "AND" right=BoolExpr)*
		//And:
		//	Equality ({And.left=current} "AND" right=Equality)* | Equality ({And.left=current} "AND" right=Comparison)* |
		//	Comparison ({And.left=current} "AND" right=Comparison)* | Comparison ({And.left=current} "AND" right=Equality)*;
		public ParserRule getRule() { return rule; }

		//Equality ({And.left=current} "AND" right=Equality)* | Equality ({And.left=current} "AND" right=Comparison)* | Comparison
		//({And.left=current} "AND" right=Comparison)* | Comparison ({And.left=current} "AND" right=Equality)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//Equality ({And.left=current} "AND" right=Equality)*
		public Group getGroup_0() { return cGroup_0; }

		//Equality
		public RuleCall getEqualityParserRuleCall_0_0() { return cEqualityParserRuleCall_0_0; }

		//({And.left=current} "AND" right=Equality)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{And.left=current}
		public Action getAndLeftAction_0_1_0() { return cAndLeftAction_0_1_0; }

		//"AND"
		public Keyword getANDKeyword_0_1_1() { return cANDKeyword_0_1_1; }

		//right=Equality
		public Assignment getRightAssignment_0_1_2() { return cRightAssignment_0_1_2; }

		//Equality
		public RuleCall getRightEqualityParserRuleCall_0_1_2_0() { return cRightEqualityParserRuleCall_0_1_2_0; }

		//=> Equality ({And.left=current} "AND" right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }

		//=> Equality
		public RuleCall getEqualityParserRuleCall_1_0() { return cEqualityParserRuleCall_1_0; }

		//({And.left=current} "AND" right=Comparison)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{And.left=current}
		public Action getAndLeftAction_1_1_0() { return cAndLeftAction_1_1_0; }

		//"AND"
		public Keyword getANDKeyword_1_1_1() { return cANDKeyword_1_1_1; }

		//right=Comparison
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_1_2_0() { return cRightComparisonParserRuleCall_1_1_2_0; }

		//=> Comparison ({And.left=current} "AND" right=Comparison)*
		public Group getGroup_2() { return cGroup_2; }

		//=> Comparison
		public RuleCall getComparisonParserRuleCall_2_0() { return cComparisonParserRuleCall_2_0; }

		//({And.left=current} "AND" right=Comparison)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//{And.left=current}
		public Action getAndLeftAction_2_1_0() { return cAndLeftAction_2_1_0; }

		//"AND"
		public Keyword getANDKeyword_2_1_1() { return cANDKeyword_2_1_1; }

		//right=Comparison
		public Assignment getRightAssignment_2_1_2() { return cRightAssignment_2_1_2; }

		//Comparison
		public RuleCall getRightComparisonParserRuleCall_2_1_2_0() { return cRightComparisonParserRuleCall_2_1_2_0; }

		//=> Comparison ({And.left=current} "AND" right=Equality)*
		public Group getGroup_3() { return cGroup_3; }

		//=> Comparison
		public RuleCall getComparisonParserRuleCall_3_0() { return cComparisonParserRuleCall_3_0; }

		//({And.left=current} "AND" right=Equality)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//{And.left=current}
		public Action getAndLeftAction_3_1_0() { return cAndLeftAction_3_1_0; }

		//"AND"
		public Keyword getANDKeyword_3_1_1() { return cANDKeyword_3_1_1; }

		//right=Equality
		public Assignment getRightAssignment_3_1_2() { return cRightAssignment_3_1_2; }

		//Equality
		public RuleCall getRightEqualityParserRuleCall_3_1_2_0() { return cRightEqualityParserRuleCall_3_1_2_0; }
	}

	public class EqualityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Equality");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cFloatExprParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Action cEqualityLeftAction_0_1_0 = (Action)cGroup_0_1.eContents().get(0);
		private final Assignment cOpAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final Alternatives cOpAlternatives_0_1_1_0 = (Alternatives)cOpAssignment_0_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_0_1_1_0_0 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_0_1_1_0_1 = (Keyword)cOpAlternatives_0_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_0_1_2 = (Assignment)cGroup_0_1.eContents().get(2);
		private final RuleCall cRightFloatExprParserRuleCall_0_1_2_0 = (RuleCall)cRightAssignment_0_1_2.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cStringExprParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Action cEqualityLeftAction_1_1_0 = (Action)cGroup_1_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_1_0 = (Alternatives)cOpAssignment_1_1_1.eContents().get(0);
		private final Keyword cOpEqualsSignEqualsSignKeyword_1_1_1_0_0 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(0);
		private final Keyword cOpExclamationMarkEqualsSignKeyword_1_1_1_0_1 = (Keyword)cOpAlternatives_1_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_1_2 = (Assignment)cGroup_1_1.eContents().get(2);
		private final RuleCall cRightStringExprParserRuleCall_1_1_2_0 = (RuleCall)cRightAssignment_1_1_2.eContents().get(0);
		
		//Equality:
		//	FloatExpr ({Equality.left=current} op=("==" | "!=") right=FloatExpr) | StringExpr ({Equality.left=current} op=("==" |
		//	"!=") right=StringExpr)*;
		public ParserRule getRule() { return rule; }

		//FloatExpr ({Equality.left=current} op=("==" | "!=") right=FloatExpr) | StringExpr ({Equality.left=current} op=("==" |
		//"!=") right=StringExpr)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//FloatExpr ({Equality.left=current} op=("==" | "!=") right=FloatExpr)
		public Group getGroup_0() { return cGroup_0; }

		//FloatExpr
		public RuleCall getFloatExprParserRuleCall_0_0() { return cFloatExprParserRuleCall_0_0; }

		//{Equality.left=current} op=("==" | "!=") right=FloatExpr
		public Group getGroup_0_1() { return cGroup_0_1; }

		//{Equality.left=current}
		public Action getEqualityLeftAction_0_1_0() { return cEqualityLeftAction_0_1_0; }

		//op=("==" | "!=")
		public Assignment getOpAssignment_0_1_1() { return cOpAssignment_0_1_1; }

		//"==" | "!="
		public Alternatives getOpAlternatives_0_1_1_0() { return cOpAlternatives_0_1_1_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_0_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_0_1_1_0_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_0_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_0_1_1_0_1; }

		//right=FloatExpr
		public Assignment getRightAssignment_0_1_2() { return cRightAssignment_0_1_2; }

		//FloatExpr
		public RuleCall getRightFloatExprParserRuleCall_0_1_2_0() { return cRightFloatExprParserRuleCall_0_1_2_0; }

		//=> StringExpr ({Equality.left=current} op=("==" | "!=") right=StringExpr)*
		public Group getGroup_1() { return cGroup_1; }

		//=> StringExpr
		public RuleCall getStringExprParserRuleCall_1_0() { return cStringExprParserRuleCall_1_0; }

		//({Equality.left=current} op=("==" | "!=") right=StringExpr)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//{Equality.left=current}
		public Action getEqualityLeftAction_1_1_0() { return cEqualityLeftAction_1_1_0; }

		//op=("==" | "!=")
		public Assignment getOpAssignment_1_1_1() { return cOpAssignment_1_1_1; }

		//"==" | "!="
		public Alternatives getOpAlternatives_1_1_1_0() { return cOpAlternatives_1_1_1_0; }

		//"=="
		public Keyword getOpEqualsSignEqualsSignKeyword_1_1_1_0_0() { return cOpEqualsSignEqualsSignKeyword_1_1_1_0_0; }

		//"!="
		public Keyword getOpExclamationMarkEqualsSignKeyword_1_1_1_0_1() { return cOpExclamationMarkEqualsSignKeyword_1_1_1_0_1; }

		//right=StringExpr
		public Assignment getRightAssignment_1_1_2() { return cRightAssignment_1_1_2; }

		//StringExpr
		public RuleCall getRightStringExprParserRuleCall_1_1_2_0() { return cRightStringExprParserRuleCall_1_1_2_0; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPlusOrMinusParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComparisonLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpGreaterThanSignEqualsSignKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpLessThanSignEqualsSignKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpGreaterThanSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpLessThanSignKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPlusOrMinusParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison:
		//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
		public ParserRule getRule() { return rule; }

		//PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup() { return cGroup; }

		//PlusOrMinus
		public RuleCall getPlusOrMinusParserRuleCall_0() { return cPlusOrMinusParserRuleCall_0; }

		//({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*
		public Group getGroup_1() { return cGroup_1; }

		//{Comparison.left=current}
		public Action getComparisonLeftAction_1_0() { return cComparisonLeftAction_1_0; }

		//op=(">=" | "<=" | ">" | "<")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//">=" | "<=" | ">" | "<"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//">="
		public Keyword getOpGreaterThanSignEqualsSignKeyword_1_1_0_0() { return cOpGreaterThanSignEqualsSignKeyword_1_1_0_0; }

		//"<="
		public Keyword getOpLessThanSignEqualsSignKeyword_1_1_0_1() { return cOpLessThanSignEqualsSignKeyword_1_1_0_1; }

		//">"
		public Keyword getOpGreaterThanSignKeyword_1_1_0_2() { return cOpGreaterThanSignKeyword_1_1_0_2; }

		//"<"
		public Keyword getOpLessThanSignKeyword_1_1_0_3() { return cOpLessThanSignKeyword_1_1_0_3; }

		//right=PlusOrMinus
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PlusOrMinus
		public RuleCall getRightPlusOrMinusParserRuleCall_1_2_0() { return cRightPlusOrMinusParserRuleCall_1_2_0; }
	}

	public class SwitchExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "switchExpr");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueSwitchKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//switchExpr:
		//	value="switch";
		public ParserRule getRule() { return rule; }

		//value="switch"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"switch"
		public Keyword getValueSwitchKeyword_0() { return cValueSwitchKeyword_0; }
	}

	public class MutationExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MutationExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cValueAlternatives_0_0 = (Alternatives)cValueAssignment_0.eContents().get(0);
		private final Keyword cValuePlusSignKeyword_0_0_0 = (Keyword)cValueAlternatives_0_0.eContents().get(0);
		private final Keyword cValueHyphenMinusKeyword_0_0_1 = (Keyword)cValueAlternatives_0_0.eContents().get(1);
		private final Keyword cValueAsteriskKeyword_0_0_2 = (Keyword)cValueAlternatives_0_0.eContents().get(2);
		private final Keyword cValueSolidusKeyword_0_0_3 = (Keyword)cValueAlternatives_0_0.eContents().get(3);
		private final Keyword cValueCircumflexAccentKeyword_0_0_4 = (Keyword)cValueAlternatives_0_0.eContents().get(4);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//MutationExpr:
		//	value=("+" | "-" | "*" | "/" | "^") FLOAT;
		public ParserRule getRule() { return rule; }

		//value=("+" | "-" | "*" | "/" | "^") FLOAT
		public Group getGroup() { return cGroup; }

		//value=("+" | "-" | "*" | "/" | "^")
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }

		//"+" | "-" | "*" | "/" | "^"
		public Alternatives getValueAlternatives_0_0() { return cValueAlternatives_0_0; }

		//"+"
		public Keyword getValuePlusSignKeyword_0_0_0() { return cValuePlusSignKeyword_0_0_0; }

		//"-"
		public Keyword getValueHyphenMinusKeyword_0_0_1() { return cValueHyphenMinusKeyword_0_0_1; }

		//"*"
		public Keyword getValueAsteriskKeyword_0_0_2() { return cValueAsteriskKeyword_0_0_2; }

		//"/"
		public Keyword getValueSolidusKeyword_0_0_3() { return cValueSolidusKeyword_0_0_3; }

		//"^"
		public Keyword getValueCircumflexAccentKeyword_0_0_4() { return cValueCircumflexAccentKeyword_0_0_4; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }
	}

	public class FloatExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatExpr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueDirectAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueDirectINTTerminalRuleCall_0_0 = (RuleCall)cValueDirectAssignment_0.eContents().get(0);
		private final Assignment cValueCalculatedAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueCalculatedPlusOrMinusParserRuleCall_1_0 = (RuleCall)cValueCalculatedAssignment_1.eContents().get(0);
		private final Assignment cValueOfFluentAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueOfFluentFluentWhoseValueParserRuleCall_2_0 = (RuleCall)cValueOfFluentAssignment_2.eContents().get(0);
		
		//FloatExpr:
		//	=> valueDirect=INT | valueCalculated=PlusOrMinus | => valueOfFluent=FluentWhoseValue;
		public ParserRule getRule() { return rule; }

		//=> valueDirect=INT | valueCalculated=PlusOrMinus | => valueOfFluent=FluentWhoseValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//=> valueDirect=INT
		public Assignment getValueDirectAssignment_0() { return cValueDirectAssignment_0; }

		//INT
		public RuleCall getValueDirectINTTerminalRuleCall_0_0() { return cValueDirectINTTerminalRuleCall_0_0; }

		//valueCalculated=PlusOrMinus
		public Assignment getValueCalculatedAssignment_1() { return cValueCalculatedAssignment_1; }

		//PlusOrMinus
		public RuleCall getValueCalculatedPlusOrMinusParserRuleCall_1_0() { return cValueCalculatedPlusOrMinusParserRuleCall_1_0; }

		//=> valueOfFluent=FluentWhoseValue
		public Assignment getValueOfFluentAssignment_2() { return cValueOfFluentAssignment_2; }

		//FluentWhoseValue
		public RuleCall getValueOfFluentFluentWhoseValueParserRuleCall_2_0() { return cValueOfFluentFluentWhoseValueParserRuleCall_2_0; }
	}

	public class PlusOrMinusElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PlusOrMinus");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMulOrDivParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_1_0 = (Alternatives)cGroup_1.eContents().get(0);
		private final Group cGroup_1_0_0 = (Group)cAlternatives_1_0.eContents().get(0);
		private final Action cPlusLeftAction_1_0_0_0 = (Action)cGroup_1_0_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_0_0_1 = (Keyword)cGroup_1_0_0.eContents().get(1);
		private final Group cGroup_1_0_1 = (Group)cAlternatives_1_0.eContents().get(1);
		private final Action cMinusLeftAction_1_0_1_0 = (Action)cGroup_1_0_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_0_1_1 = (Keyword)cGroup_1_0_1.eContents().get(1);
		private final Assignment cRightAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRightMulOrDivParserRuleCall_1_1_0 = (RuleCall)cRightAssignment_1_1.eContents().get(0);
		
		//PlusOrMinus:
		//	MulOrDiv (({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*;
		public ParserRule getRule() { return rule; }

		//MulOrDiv (({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*
		public Group getGroup() { return cGroup; }

		//MulOrDiv
		public RuleCall getMulOrDivParserRuleCall_0() { return cMulOrDivParserRuleCall_0; }

		//(({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current} "+" | {Minus.left=current} "-"
		public Alternatives getAlternatives_1_0() { return cAlternatives_1_0; }

		//{Plus.left=current} "+"
		public Group getGroup_1_0_0() { return cGroup_1_0_0; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0_0_0() { return cPlusLeftAction_1_0_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_0_0_1() { return cPlusSignKeyword_1_0_0_1; }

		//{Minus.left=current} "-"
		public Group getGroup_1_0_1() { return cGroup_1_0_1; }

		//{Minus.left=current}
		public Action getMinusLeftAction_1_0_1_0() { return cMinusLeftAction_1_0_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1_0_1_1() { return cHyphenMinusKeyword_1_0_1_1; }

		//right=MulOrDiv
		public Assignment getRightAssignment_1_1() { return cRightAssignment_1_1; }

		//MulOrDiv
		public RuleCall getRightMulOrDivParserRuleCall_1_1_0() { return cRightMulOrDivParserRuleCall_1_1_0; }
	}

	public class MulOrDivElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MulOrDiv");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMulOrDivLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOpAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOpAlternatives_1_1_0 = (Alternatives)cOpAssignment_1_1.eContents().get(0);
		private final Keyword cOpAsteriskKeyword_1_1_0_0 = (Keyword)cOpAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOpSolidusKeyword_1_1_0_1 = (Keyword)cOpAlternatives_1_1_0.eContents().get(1);
		private final Keyword cOpPercentSignKeyword_1_1_0_2 = (Keyword)cOpAlternatives_1_1_0.eContents().get(2);
		private final Keyword cOpCircumflexAccentKeyword_1_1_0_3 = (Keyword)cOpAlternatives_1_1_0.eContents().get(3);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//MulOrDiv:
		//	Primary ({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Primary)*;
		public ParserRule getRule() { return rule; }

		//Primary ({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Primary)*
		public Group getGroup() { return cGroup; }

		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }

		//({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Primary)*
		public Group getGroup_1() { return cGroup_1; }

		//{MulOrDiv.left=current}
		public Action getMulOrDivLeftAction_1_0() { return cMulOrDivLeftAction_1_0; }

		//op=("*" | "/" | "%" | "^")
		public Assignment getOpAssignment_1_1() { return cOpAssignment_1_1; }

		//"*" | "/" | "%" | "^"
		public Alternatives getOpAlternatives_1_1_0() { return cOpAlternatives_1_1_0; }

		//"*"
		public Keyword getOpAsteriskKeyword_1_1_0_0() { return cOpAsteriskKeyword_1_1_0_0; }

		//"/"
		public Keyword getOpSolidusKeyword_1_1_0_1() { return cOpSolidusKeyword_1_1_0_1; }

		//"%"
		public Keyword getOpPercentSignKeyword_1_1_0_2() { return cOpPercentSignKeyword_1_1_0_2; }

		//"^"
		public Keyword getOpCircumflexAccentKeyword_1_1_0_3() { return cOpCircumflexAccentKeyword_1_1_0_3; }

		//right=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueDirectAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueDirectINTTerminalRuleCall_0_0 = (RuleCall)cValueDirectAssignment_0.eContents().get(0);
		private final Assignment cValueOfFluentAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValueOfFluentFluentWhoseValueParserRuleCall_1_0 = (RuleCall)cValueOfFluentAssignment_1.eContents().get(0);
		
		//Primary:
		//	valueDirect=INT | valueOfFluent=FluentWhoseValue;
		public ParserRule getRule() { return rule; }

		//valueDirect=INT | valueOfFluent=FluentWhoseValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//valueDirect=INT
		public Assignment getValueDirectAssignment_0() { return cValueDirectAssignment_0; }

		//INT
		public RuleCall getValueDirectINTTerminalRuleCall_0_0() { return cValueDirectINTTerminalRuleCall_0_0; }

		//valueOfFluent=FluentWhoseValue
		public Assignment getValueOfFluentAssignment_1() { return cValueOfFluentAssignment_1; }

		//FluentWhoseValue
		public RuleCall getValueOfFluentFluentWhoseValueParserRuleCall_1_0() { return cValueOfFluentFluentWhoseValueParserRuleCall_1_0; }
	}

	public class FluentWhoseValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FluentWhoseValue");
		private final Assignment cFluentWhoseValueNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFluentWhoseValueNameIDTerminalRuleCall_0 = (RuleCall)cFluentWhoseValueNameAssignment.eContents().get(0);
		
		////in una fase successiva verrà tradotto in valore numerico/bool/stringa?
		//FluentWhoseValue:
		//	fluentWhoseValueName=ID;
		public ParserRule getRule() { return rule; }

		//fluentWhoseValueName=ID
		public Assignment getFluentWhoseValueNameAssignment() { return cFluentWhoseValueNameAssignment; }

		//ID
		public RuleCall getFluentWhoseValueNameIDTerminalRuleCall_0() { return cFluentWhoseValueNameIDTerminalRuleCall_0; }
	}

	public class StrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Str");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//Str:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class InRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTimeAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTimeINTTerminalRuleCall_0_0 = (RuleCall)cTimeAssignment_0.eContents().get(0);
		private final Assignment cCurrentTimeAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cCurrentTimeNowKeyword_1_0 = (Keyword)cCurrentTimeAssignment_1.eContents().get(0);
		
		////IN RULE ******************************************************************
		//InRule:
		//	time=INT | currentTime="now";
		public ParserRule getRule() { return rule; }

		//time=INT | currentTime="now"
		public Alternatives getAlternatives() { return cAlternatives; }

		//time=INT
		public Assignment getTimeAssignment_0() { return cTimeAssignment_0; }

		//INT
		public RuleCall getTimeINTTerminalRuleCall_0_0() { return cTimeINTTerminalRuleCall_0_0; }

		//currentTime="now"
		public Assignment getCurrentTimeAssignment_1() { return cCurrentTimeAssignment_1; }

		//"now"
		public Keyword getCurrentTimeNowKeyword_1_0() { return cCurrentTimeNowKeyword_1_0; }
	}

	public class ConditionRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionRule");
		private final Assignment cConditionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConditionBoolExprParserRuleCall_0 = (RuleCall)cConditionAssignment.eContents().get(0);
		
		////CONDITION RULE ***********************************************************
		////ExpFluent:
		////	fluentName=ID	
		////	('to' valuePart = ToRule)
		////	('in' timePart = InRule)? 
		////;
		//ConditionRule:
		//	condition=BoolExpr;
		public ParserRule getRule() { return rule; }

		//condition=BoolExpr
		public Assignment getConditionAssignment() { return cConditionAssignment; }

		//BoolExpr
		public RuleCall getConditionBoolExprParserRuleCall_0() { return cConditionBoolExprParserRuleCall_0; }
	}
	
	
	private DroolsModelElements pDroolsModel;
	private StatementElements pStatement;
	private EventElements pEvent;
	private FluentElements pFluent;
	private ToRuleElements pToRule;
	private StringExprElements pStringExpr;
	private BoolExprElements pBoolExpr;
	private OrElements pOr;
	private AndElements pAnd;
	private EqualityElements pEquality;
	private ComparisonElements pComparison;
	private SwitchExprElements pSwitchExpr;
	private MutationExprElements pMutationExpr;
	private FloatExprElements pFloatExpr;
	private TerminalRule tFLOAT;
	private PlusOrMinusElements pPlusOrMinus;
	private MulOrDivElements pMulOrDiv;
	private PrimaryElements pPrimary;
	private FluentWhoseValueElements pFluentWhoseValue;
	private StrElements pStr;
	private InRuleElements pInRule;
	private ConditionRuleElements pConditionRule;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public EceGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.ecerule.Ece".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DroolsModel:
	//	statements+=Statement*;
	public DroolsModelElements getDroolsModelAccess() {
		return (pDroolsModel != null) ? pDroolsModel : (pDroolsModel = new DroolsModelElements());
	}
	
	public ParserRule getDroolsModelRule() {
		return getDroolsModelAccess().getRule();
	}

	//Statement:
	//	"on" event=Event "set" fluent+=Fluent ("," fluent+=Fluent)* / *('expect' exp+=ExpFluent (',' exp+=ExpFluent)*)? * /
	//	";";
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//Event:
	//	eventName=ID;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Fluent:
	//	fluentName=ID ("to" valuePart=ToRule) ("in" timePart=InRule)? ("if" condPart=ConditionRule)?;
	public FluentElements getFluentAccess() {
		return (pFluent != null) ? pFluent : (pFluent = new FluentElements());
	}
	
	public ParserRule getFluentRule() {
		return getFluentAccess().getRule();
	}

	////TO RULE ******************************************************************
	//ToRule:
	//	expression=StringExpr //switch BoolExpr
	//	//mutation FloatExpr
	//	| => expression=BoolExpr | expression=switchExpr | => (expression=FloatExpr) | expression=MutationExpr;
	public ToRuleElements getToRuleAccess() {
		return (pToRule != null) ? pToRule : (pToRule = new ToRuleElements());
	}
	
	public ParserRule getToRuleRule() {
		return getToRuleAccess().getRule();
	}

	//StringExpr:
	//	Str | FluentWhoseValue;
	public StringExprElements getStringExprAccess() {
		return (pStringExpr != null) ? pStringExpr : (pStringExpr = new StringExprElements());
	}
	
	public ParserRule getStringExprRule() {
		return getStringExprAccess().getRule();
	}

	//BoolExpr:
	//	value="true" | value="false" | Or;
	public BoolExprElements getBoolExprAccess() {
		return (pBoolExpr != null) ? pBoolExpr : (pBoolExpr = new BoolExprElements());
	}
	
	public ParserRule getBoolExprRule() {
		return getBoolExprAccess().getRule();
	}

	//Or:
	//	And ({Or.left=current} "OR" right=And)*;
	public OrElements getOrAccess() {
		return (pOr != null) ? pOr : (pOr = new OrElements());
	}
	
	public ParserRule getOrRule() {
		return getOrAccess().getRule();
	}

	////	|=>Equality ({And.left=current} "AND" right=BoolExpr)* 
	////	|=>Comparison ({And.left=current} "AND" right=BoolExpr)*
	//And:
	//	Equality ({And.left=current} "AND" right=Equality)* | Equality ({And.left=current} "AND" right=Comparison)* |
	//	Comparison ({And.left=current} "AND" right=Comparison)* | Comparison ({And.left=current} "AND" right=Equality)*;
	public AndElements getAndAccess() {
		return (pAnd != null) ? pAnd : (pAnd = new AndElements());
	}
	
	public ParserRule getAndRule() {
		return getAndAccess().getRule();
	}

	//Equality:
	//	FloatExpr ({Equality.left=current} op=("==" | "!=") right=FloatExpr) | StringExpr ({Equality.left=current} op=("==" |
	//	"!=") right=StringExpr)*;
	public EqualityElements getEqualityAccess() {
		return (pEquality != null) ? pEquality : (pEquality = new EqualityElements());
	}
	
	public ParserRule getEqualityRule() {
		return getEqualityAccess().getRule();
	}

	//Comparison:
	//	PlusOrMinus ({Comparison.left=current} op=(">=" | "<=" | ">" | "<") right=PlusOrMinus)*;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//switchExpr:
	//	value="switch";
	public SwitchExprElements getSwitchExprAccess() {
		return (pSwitchExpr != null) ? pSwitchExpr : (pSwitchExpr = new SwitchExprElements());
	}
	
	public ParserRule getSwitchExprRule() {
		return getSwitchExprAccess().getRule();
	}

	//MutationExpr:
	//	value=("+" | "-" | "*" | "/" | "^") FLOAT;
	public MutationExprElements getMutationExprAccess() {
		return (pMutationExpr != null) ? pMutationExpr : (pMutationExpr = new MutationExprElements());
	}
	
	public ParserRule getMutationExprRule() {
		return getMutationExprAccess().getRule();
	}

	//FloatExpr:
	//	=> valueDirect=INT | valueCalculated=PlusOrMinus | => valueOfFluent=FluentWhoseValue;
	public FloatExprElements getFloatExprAccess() {
		return (pFloatExpr != null) ? pFloatExpr : (pFloatExpr = new FloatExprElements());
	}
	
	public ParserRule getFloatExprRule() {
		return getFloatExprAccess().getRule();
	}

	//terminal FLOAT returns ecore::EFloat:
	//	"0".."9"* "." "0".."9"+;
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//PlusOrMinus:
	//	MulOrDiv (({Plus.left=current} "+" | {Minus.left=current} "-") right=MulOrDiv)*;
	public PlusOrMinusElements getPlusOrMinusAccess() {
		return (pPlusOrMinus != null) ? pPlusOrMinus : (pPlusOrMinus = new PlusOrMinusElements());
	}
	
	public ParserRule getPlusOrMinusRule() {
		return getPlusOrMinusAccess().getRule();
	}

	//MulOrDiv:
	//	Primary ({MulOrDiv.left=current} op=("*" | "/" | "%" | "^") right=Primary)*;
	public MulOrDivElements getMulOrDivAccess() {
		return (pMulOrDiv != null) ? pMulOrDiv : (pMulOrDiv = new MulOrDivElements());
	}
	
	public ParserRule getMulOrDivRule() {
		return getMulOrDivAccess().getRule();
	}

	//Primary:
	//	valueDirect=INT | valueOfFluent=FluentWhoseValue;
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	////in una fase successiva verrà tradotto in valore numerico/bool/stringa?
	//FluentWhoseValue:
	//	fluentWhoseValueName=ID;
	public FluentWhoseValueElements getFluentWhoseValueAccess() {
		return (pFluentWhoseValue != null) ? pFluentWhoseValue : (pFluentWhoseValue = new FluentWhoseValueElements());
	}
	
	public ParserRule getFluentWhoseValueRule() {
		return getFluentWhoseValueAccess().getRule();
	}

	//Str:
	//	value=STRING;
	public StrElements getStrAccess() {
		return (pStr != null) ? pStr : (pStr = new StrElements());
	}
	
	public ParserRule getStrRule() {
		return getStrAccess().getRule();
	}

	////IN RULE ******************************************************************
	//InRule:
	//	time=INT | currentTime="now";
	public InRuleElements getInRuleAccess() {
		return (pInRule != null) ? pInRule : (pInRule = new InRuleElements());
	}
	
	public ParserRule getInRuleRule() {
		return getInRuleAccess().getRule();
	}

	////CONDITION RULE ***********************************************************
	////ExpFluent:
	////	fluentName=ID	
	////	('to' valuePart = ToRule)
	////	('in' timePart = InRule)? 
	////;
	//ConditionRule:
	//	condition=BoolExpr;
	public ConditionRuleElements getConditionRuleAccess() {
		return (pConditionRule != null) ? pConditionRule : (pConditionRule = new ConditionRuleElements());
	}
	
	public ParserRule getConditionRuleRule() {
		return getConditionRuleAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
