/*
* generated by Xtext
*/
grammar InternalEce;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.ecerule.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.ecerule.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.ecerule.services.EceGrammarAccess;

}

@parser::members {

 	private EceGrammarAccess grammarAccess;
 	
    public InternalEceParser(TokenStream input, EceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "EceModel";	
   	}
   	
   	@Override
   	protected EceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleEceModel
entryRuleEceModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEceModelRule()); }
	 iv_ruleEceModel=ruleEceModel 
	 { $current=$iv_ruleEceModel.current; } 
	 EOF 
;

// Rule EceModel
ruleEceModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getEceModelAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEceModelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='on' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatementAccess().getOnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getEventEventParserRuleCall_1_0()); 
	    }
		lv_event_1_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_1_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getContextsListContextsListParserRuleCall_2_0()); 
	    }
		lv_contextsList_2_0=ruleContextsList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"contextsList",
        		lv_contextsList_2_0, 
        		"ContextsList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getStatementAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_eventName_0_0=RULE_ID
		{
			newLeafNode(lv_eventName_0_0, grammarAccess.getEventAccess().getEventNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"eventName",
        		lv_eventName_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='(' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEventAccess().getLeftParenthesisKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getParamsEventFeatureParserRuleCall_1_1_0()); 
	    }
		lv_params_2_0=ruleEventFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_2_0, 
        		"EventFeature");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getEventAccess().getCommaKeyword_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEventAccess().getParamsEventFeatureParserRuleCall_1_2_1_0()); 
	    }
		lv_params_4_0=ruleEventFeature		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEventRule());
	        }
       		add(
       			$current, 
       			"params",
        		lv_params_4_0, 
        		"EventFeature");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getEventAccess().getRightParenthesisKeyword_1_3());
    }
)?)
;





// Entry rule entryRuleEventFeature
entryRuleEventFeature returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventFeatureRule()); }
	 iv_ruleEventFeature=ruleEventFeature 
	 { $current=$iv_ruleEventFeature.current; } 
	 EOF 
;

// Rule EventFeature
ruleEventFeature returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getEventFeatureAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventFeatureRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleContextsList
entryRuleContextsList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getContextsListRule()); }
	 iv_ruleContextsList=ruleContextsList 
	 { $current=$iv_ruleContextsList.current; } 
	 EOF 
;

// Rule ContextsList
ruleContextsList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getContextsListAccess().getEcContextsListEcContextsListParserRuleCall_0_0()); 
	    }
		lv_ecContextsList_0_0=ruleEcContextsList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextsListRule());
	        }
       		set(
       			$current, 
       			"ecContextsList",
        		lv_ecContextsList_0_0, 
        		"EcContextsList");
	        afterParserOrEnumRuleCall();
	    }

)
)?(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getContextsListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContextsListAccess().getExpContextsListExpContextsListParserRuleCall_1_1_0()); 
	    }
		lv_expContextsList_2_0=ruleExpContextsList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContextsListRule());
	        }
       		set(
       			$current, 
       			"expContextsList",
        		lv_expContextsList_2_0, 
        		"ExpContextsList");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleEcContextsList
entryRuleEcContextsList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEcContextsListRule()); }
	 iv_ruleEcContextsList=ruleEcContextsList 
	 { $current=$iv_ruleEcContextsList.current; } 
	 EOF 
;

// Rule EcContextsList
ruleEcContextsList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getEcContextsListAccess().getEcContextsEcContextParserRuleCall_0_0()); 
	    }
		lv_ecContexts_0_0=ruleEcContext		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEcContextsListRule());
	        }
       		add(
       			$current, 
       			"ecContexts",
        		lv_ecContexts_0_0, 
        		"EcContext");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getEcContextsListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEcContextsListAccess().getEcContextsEcContextParserRuleCall_1_1_0()); 
	    }
		lv_ecContexts_2_0=ruleEcContext		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEcContextsListRule());
	        }
       		add(
       			$current, 
       			"ecContexts",
        		lv_ecContexts_2_0, 
        		"EcContext");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpContextsList
entryRuleExpContextsList returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpContextsListRule()); }
	 iv_ruleExpContextsList=ruleExpContextsList 
	 { $current=$iv_ruleExpContextsList.current; } 
	 EOF 
;

// Rule ExpContextsList
ruleExpContextsList returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getExpContextsListAccess().getExpContextsExpContextParserRuleCall_0_0()); 
	    }
		lv_expContexts_0_0=ruleExpContext		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpContextsListRule());
	        }
       		add(
       			$current, 
       			"expContexts",
        		lv_expContexts_0_0, 
        		"ExpContext");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1=',' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getExpContextsListAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpContextsListAccess().getExpContextsExpContextParserRuleCall_1_1_0()); 
	    }
		lv_expContexts_2_0=ruleExpContext		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpContextsListRule());
	        }
       		add(
       			$current, 
       			"expContexts",
        		lv_expContexts_2_0, 
        		"ExpContext");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEcContext
entryRuleEcContext returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEcContextRule()); }
	 iv_ruleEcContext=ruleEcContext 
	 { $current=$iv_ruleEcContext.current; } 
	 EOF 
;

// Rule EcContext
ruleEcContext returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='set' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getEcContextAccess().getSetKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEcContextAccess().getFluentFluentParserRuleCall_1_0()); 
	    }
		lv_fluent_1_0=ruleFluent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEcContextRule());
	        }
       		add(
       			$current, 
       			"fluent",
        		lv_fluent_1_0, 
        		"Fluent");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getEcContextAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getEcContextAccess().getFluentFluentParserRuleCall_2_1_0()); 
	    }
		lv_fluent_3_0=ruleFluent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEcContextRule());
	        }
       		add(
       			$current, 
       			"fluent",
        		lv_fluent_3_0, 
        		"Fluent");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleExpContext
entryRuleExpContext returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpContextRule()); }
	 iv_ruleExpContext=ruleExpContext 
	 { $current=$iv_ruleExpContext.current; } 
	 EOF 
;

// Rule ExpContext
ruleExpContext returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='expect' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getExpContextAccess().getExpectKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpContextAccess().getFinalConditionConditionRuleParserRuleCall_1_0()); 
	    }
		lv_finalCondition_1_0=ruleConditionRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpContextRule());
	        }
       		set(
       			$current, 
       			"finalCondition",
        		lv_finalCondition_1_0, 
        		"ConditionRule");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getExpContextAccess().getAllenOpAllenOpParserRuleCall_2_0_0()); 
	    }
		lv_allenOp_2_0=ruleAllenOp		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpContextRule());
	        }
       		set(
       			$current, 
       			"allenOp",
        		lv_allenOp_2_0, 
        		"AllenOp");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpContextAccess().getTimePlusOrMinusParserRuleCall_2_1_0()); 
	    }
		lv_time_3_0=rulePlusOrMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpContextRule());
	        }
       		set(
       			$current, 
       			"time",
        		lv_time_3_0, 
        		"PlusOrMinus");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_4='if' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getExpContextAccess().getIfKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getExpContextAccess().getInitialConditionConditionRuleParserRuleCall_3_1_0()); 
	    }
		lv_initialCondition_5_0=ruleConditionRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpContextRule());
	        }
       		set(
       			$current, 
       			"initialCondition",
        		lv_initialCondition_5_0, 
        		"ConditionRule");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleAllenOp
entryRuleAllenOp returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAllenOpRule()); }
	 iv_ruleAllenOp=ruleAllenOp 
	 { $current=$iv_ruleAllenOp.current; } 
	 EOF 
;

// Rule AllenOp
ruleAllenOp returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAllenOpAccess().getAllenOperatorAction_0(),
            $current);
    }
)(
(
(
		lv_value_1_1=	'before' 
    {
        newLeafNode(lv_value_1_1, grammarAccess.getAllenOpAccess().getValueBeforeKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllenOpRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_1_1, null);
	    }

    |		lv_value_1_2=	'after' 
    {
        newLeafNode(lv_value_1_2, grammarAccess.getAllenOpAccess().getValueAfterKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllenOpRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_1_2, null);
	    }

    |		lv_value_1_3=	'in' 
    {
        newLeafNode(lv_value_1_3, grammarAccess.getAllenOpAccess().getValueInKeyword_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAllenOpRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_1_3, null);
	    }

)

)
))
;





// Entry rule entryRuleFluent
entryRuleFluent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFluentRule()); }
	 iv_ruleFluent=ruleFluent 
	 { $current=$iv_ruleFluent.current; } 
	 EOF 
;

// Rule Fluent
ruleFluent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getFluentAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFluentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='to' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFluentAccess().getToKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFluentAccess().getValuePartToRuleParserRuleCall_1_1_0()); 
	    }
		lv_valuePart_2_0=ruleToRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFluentRule());
	        }
       		set(
       			$current, 
       			"valuePart",
        		lv_valuePart_2_0, 
        		"ToRule");
	        afterParserOrEnumRuleCall();
	    }

)
))(	otherlv_3='in' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getFluentAccess().getInKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFluentAccess().getTimePartInRuleParserRuleCall_2_1_0()); 
	    }
		lv_timePart_4_0=ruleInRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFluentRule());
	        }
       		set(
       			$current, 
       			"timePart",
        		lv_timePart_4_0, 
        		"InRule");
	        afterParserOrEnumRuleCall();
	    }

)
))?(	otherlv_5='if' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getFluentAccess().getIfKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFluentAccess().getCondPartConditionRuleParserRuleCall_3_1_0()); 
	    }
		lv_condPart_6_0=ruleConditionRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFluentRule());
	        }
       		set(
       			$current, 
       			"condPart",
        		lv_condPart_6_0, 
        		"ConditionRule");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleConditionRule
entryRuleConditionRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRuleRule()); }
	 iv_ruleConditionRule=ruleConditionRule 
	 { $current=$iv_ruleConditionRule.current; } 
	 EOF 
;

// Rule ConditionRule
ruleConditionRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getConditionRuleAccess().getExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionRuleAccess().getConditionExpressionParserRuleCall_1_0()); 
	    }
		lv_condition_1_0=ruleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRuleRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_1_0, 
        		"Expression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleToRule
entryRuleToRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getToRuleRule()); }
	 iv_ruleToRule=ruleToRule 
	 { $current=$iv_ruleToRule.current; } 
	 EOF 
;

// Rule ToRule
ruleToRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getToRuleAccess().getExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getToRuleAccess().getExpressionPlusOrMinusParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=rulePlusOrMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getToRuleRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"PlusOrMinus");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleInRule
entryRuleInRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInRuleRule()); }
	 iv_ruleInRule=ruleInRule 
	 { $current=$iv_ruleInRule.current; } 
	 EOF 
;

// Rule InRule
ruleInRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getInRuleAccess().getExpressionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getInRuleAccess().getExpressionPlusOrMinusParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=rulePlusOrMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getInRuleRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"PlusOrMinus");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	 iv_ruleExpression=ruleExpression 
	 { $current=$iv_ruleExpression.current; } 
	 EOF 
;

// Rule Expression
ruleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getExpressionAccess().getOrParserRuleCall()); 
    }
    this_Or_0=ruleOr
    { 
        $current = $this_Or_0.current; 
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='OR' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getORKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); 
    }
    this_Equality_0=ruleEquality
    { 
        $current = $this_Equality_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='AND' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getANDKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleEquality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Equality");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	 iv_ruleEquality=ruleEquality 
	 { $current=$iv_ruleEquality.current; } 
	 EOF 
;

// Rule Equality
ruleEquality returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getEqualityAccess().getComparisonParserRuleCall_0()); 
    }
    this_Comparison_0=ruleComparison
    { 
        $current = $this_Comparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityAccess().getEqualityLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'==' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'!=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityAccess().getRightComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Comparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	 iv_ruleComparison=ruleComparison 
	 { $current=$iv_ruleComparison.current; } 
	 EOF 
;

// Rule Comparison
ruleComparison returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0()); 
    }
    this_PlusOrMinus_0=rulePlusOrMinus
    { 
        $current = $this_PlusOrMinus_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'>=' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'>' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'<' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePlusOrMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PlusOrMinus");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusOrMinusRule()); }
	 iv_rulePlusOrMinus=rulePlusOrMinus 
	 { $current=$iv_rulePlusOrMinus.current; } 
	 EOF 
;

// Rule PlusOrMinus
rulePlusOrMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); 
    }
    this_MulOrDiv_0=ruleMulOrDiv
    { 
        $current = $this_MulOrDiv_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleMulOrDiv		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusOrMinusRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"MulOrDiv");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMulOrDivRule()); }
	 iv_ruleMulOrDiv=ruleMulOrDiv 
	 { $current=$iv_ruleMulOrDiv.current; } 
	 EOF 
;

// Rule MulOrDiv
ruleMulOrDiv returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulOrDivRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulOrDivRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'%' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getMulOrDivAccess().getOpPercentSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulOrDivRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'^' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getMulOrDivAccess().getOpCircumflexAccentKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulOrDivRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMulOrDivRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_0_1()); 
    }
    this_Expression_1=ruleExpression
    { 
        $current = $this_Expression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPrimaryAccess().getNotAction_1_0(),
            $current);
    }
)	otherlv_4='!' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getExclamationMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrimaryAccess().getExpressionPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_expression_5_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrimaryRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryAccess().getAtomicParserRuleCall_2()); 
    }
    this_Atomic_6=ruleAtomic
    { 
        $current = $this_Atomic_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtomic
entryRuleAtomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtomicRule()); }
	 iv_ruleAtomic=ruleAtomic 
	 { $current=$iv_ruleAtomic.current; } 
	 EOF 
;

// Rule Atomic
ruleAtomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getFloatConstantAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_FLOAT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getAtomicAccess().getValueFLOATTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"FLOAT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getIntConstantAction_1_0(),
            $current);
    }
)(
(
		lv_value_3_0=RULE_INT
		{
			newLeafNode(lv_value_3_0, grammarAccess.getAtomicAccess().getValueINTTerminalRuleCall_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getBoolConstantAction_2_0(),
            $current);
    }
)(
(
(
		lv_value_5_1=	'true' 
    {
        newLeafNode(lv_value_5_1, grammarAccess.getAtomicAccess().getValueTrueKeyword_2_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_5_1, null);
	    }

    |		lv_value_5_2=	'false' 
    {
        newLeafNode(lv_value_5_2, grammarAccess.getAtomicAccess().getValueFalseKeyword_2_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_5_2, null);
	    }

)

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getReferenceAction_3_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getAtomicAccess().getRefReferenceTypeCrossReference_3_1_0()); 
	}

)
)(	otherlv_8='at' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getAtomicAccess().getAtKeyword_3_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAtomicAccess().getFluentValueSampleAtTimePrimaryParserRuleCall_3_2_1_0()); 
	    }
		lv_fluentValueSample_9_0=ruleAtTimePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtomicRule());
	        }
       		set(
       			$current, 
       			"fluentValueSample",
        		lv_fluentValueSample_9_0, 
        		"AtTimePrimary");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicAccess().getCurrentTimeAction_4_0(),
            $current);
    }
)(
(
		lv_value_11_0=	'now' 
    {
        newLeafNode(lv_value_11_0, grammarAccess.getAtomicAccess().getValueNowKeyword_4_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_11_0, "now");
	    }

)
)))
;







// Entry rule entryRuleAtTimeExpression
entryRuleAtTimeExpression returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtTimeExpressionRule()); }
	 iv_ruleAtTimeExpression=ruleAtTimeExpression 
	 { $current=$iv_ruleAtTimeExpression.current; } 
	 EOF 
;

// Rule AtTimeExpression
ruleAtTimeExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAtTimeExpressionAccess().getAtTimePrimaryParserRuleCall_0()); 
    }
    this_AtTimePrimary_0=ruleAtTimePrimary
    { 
        $current = $this_AtTimePrimary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAtTimeExpressionAccess().getAtTimePlusOrMinLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'-' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getAtTimeExpressionAccess().getOpHyphenMinusKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtTimeExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'+' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getAtTimeExpressionAccess().getOpPlusSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtTimeExpressionRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getAtTimeExpressionAccess().getRightAtTimePrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAtTimePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAtTimeExpressionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"AtTimePrimary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAtTimePrimary
entryRuleAtTimePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtTimePrimaryRule()); }
	 iv_ruleAtTimePrimary=ruleAtTimePrimary 
	 { $current=$iv_ruleAtTimePrimary.current; } 
	 EOF 
;

// Rule AtTimePrimary
ruleAtTimePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getAtTimePrimaryAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getAtTimePrimaryAccess().getAtTimeExpressionParserRuleCall_0_1()); 
    }
    this_AtTimeExpression_1=ruleAtTimeExpression
    { 
        $current = $this_AtTimeExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAtTimePrimaryAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getAtTimePrimaryAccess().getAtTimeAtomicParserRuleCall_1()); 
    }
    this_AtTimeAtomic_3=ruleAtTimeAtomic
    { 
        $current = $this_AtTimeAtomic_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAtTimeAtomic
entryRuleAtTimeAtomic returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAtTimeAtomicRule()); }
	 iv_ruleAtTimeAtomic=ruleAtTimeAtomic 
	 { $current=$iv_ruleAtTimeAtomic.current; } 
	 EOF 
;

// Rule AtTimeAtomic
ruleAtTimeAtomic returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtTimeAtomicAccess().getAtTimeIntConstantAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getAtTimeAtomicAccess().getValueINTTerminalRuleCall_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtTimeAtomicRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtTimeAtomicAccess().getAtTimeCurrentTimeAction_1_0(),
            $current);
    }
)(
(
		lv_atTimeValue_3_0=	'now' 
    {
        newLeafNode(lv_atTimeValue_3_0, grammarAccess.getAtTimeAtomicAccess().getAtTimeValueNowKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtTimeAtomicRule());
	        }
       		setWithLastConsumed($current, "atTimeValue", lv_atTimeValue_3_0, "now");
	    }

)
)))
;





RULE_FLOAT : ('0'..'9')* '.' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


