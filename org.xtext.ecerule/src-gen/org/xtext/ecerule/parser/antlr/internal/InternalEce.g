/*
* generated by Xtext
*/
grammar InternalEce;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.ecerule.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.ecerule.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.ecerule.services.EceGrammarAccess;

}

@parser::members {

 	private EceGrammarAccess grammarAccess;
 	
    public InternalEceParser(TokenStream input, EceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "DroolsModel";	
   	}
   	
   	@Override
   	protected EceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDroolsModel
entryRuleDroolsModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDroolsModelRule()); }
	 iv_ruleDroolsModel=ruleDroolsModel 
	 { $current=$iv_ruleDroolsModel.current; } 
	 EOF 
;

// Rule DroolsModel
ruleDroolsModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDroolsModelAccess().getStatementsStatementParserRuleCall_0()); 
	    }
		lv_statements_0_0=ruleStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDroolsModelRule());
	        }
       		add(
       			$current, 
       			"statements",
        		lv_statements_0_0, 
        		"Statement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	 iv_ruleStatement=ruleStatement 
	 { $current=$iv_ruleStatement.current; } 
	 EOF 
;

// Rule Statement
ruleStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='on' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getStatementAccess().getOnKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getEventEventParserRuleCall_1_0()); 
	    }
		lv_event_1_0=ruleEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		set(
       			$current, 
       			"event",
        		lv_event_1_0, 
        		"Event");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='set' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStatementAccess().getSetKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getFluentFluentParserRuleCall_3_0()); 
	    }
		lv_fluent_3_0=ruleFluent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		add(
       			$current, 
       			"fluent",
        		lv_fluent_3_0, 
        		"Fluent");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_4=',' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getStatementAccess().getCommaKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStatementAccess().getFluentFluentParserRuleCall_4_1_0()); 
	    }
		lv_fluent_5_0=ruleFluent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStatementRule());
	        }
       		add(
       			$current, 
       			"fluent",
        		lv_fluent_5_0, 
        		"Fluent");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_6=';' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getStatementAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	 iv_ruleEvent=ruleEvent 
	 { $current=$iv_ruleEvent.current; } 
	 EOF 
;

// Rule Event
ruleEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_eventName_0_0=RULE_ID
		{
			newLeafNode(lv_eventName_0_0, grammarAccess.getEventAccess().getEventNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEventRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"eventName",
        		lv_eventName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleFluent
entryRuleFluent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFluentRule()); }
	 iv_ruleFluent=ruleFluent 
	 { $current=$iv_ruleFluent.current; } 
	 EOF 
;

// Rule Fluent
ruleFluent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_fluentName_0_0=RULE_ID
		{
			newLeafNode(lv_fluentName_0_0, grammarAccess.getFluentAccess().getFluentNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFluentRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fluentName",
        		lv_fluentName_0_0, 
        		"ID");
	    }

)
)(	otherlv_1='to' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getFluentAccess().getToKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFluentAccess().getValuePartToRuleParserRuleCall_1_1_0()); 
	    }
		lv_valuePart_2_0=ruleToRule		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFluentRule());
	        }
       		set(
       			$current, 
       			"valuePart",
        		lv_valuePart_2_0, 
        		"ToRule");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleToRule
entryRuleToRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getToRuleRule()); }
	 iv_ruleToRule=ruleToRule 
	 { $current=$iv_ruleToRule.current; } 
	 EOF 
;

// Rule ToRule
ruleToRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getToRuleAccess().getExpressionStringExprParserRuleCall_0()); 
	    }
		lv_expression_0_0=ruleStringExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getToRuleRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_0_0, 
        		"StringExpr");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleStringExpr
entryRuleStringExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringExprRule()); }
	 iv_ruleStringExpr=ruleStringExpr 
	 { $current=$iv_ruleStringExpr.current; } 
	 EOF 
;

// Rule StringExpr
ruleStringExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getStringExprAccess().getStrParserRuleCall_0()); 
    }
    this_Str_0=ruleStr
    { 
        $current = $this_Str_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getStringExprAccess().getFluentWhoseValueParserRuleCall_1()); 
    }
    this_FluentWhoseValue_1=ruleFluentWhoseValue
    { 
        $current = $this_FluentWhoseValue_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;







// Entry rule entryRuleOr
entryRuleOr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOrRule()); }
	 iv_ruleOr=ruleOr 
	 { $current=$iv_ruleOr.current; } 
	 EOF 
;

// Rule Or
ruleOr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getOrAccess().getAndParserRuleCall_0()); 
    }
    this_And_0=ruleAnd
    { 
        $current = $this_And_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getOrAccess().getOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='OR' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getOrAccess().getORKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"And");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleAnd
entryRuleAnd returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAndRule()); }
	 iv_ruleAnd=ruleAnd 
	 { $current=$iv_ruleAnd.current; } 
	 EOF 
;

// Rule And
ruleAnd returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAndAccess().getEqualityParserRuleCall_0()); 
    }
    this_Equality_0=ruleEquality
    { 
        $current = $this_Equality_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getAndAccess().getAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='AND' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAndAccess().getANDKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleEquality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Equality");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleEquality
entryRuleEquality returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getEqualityRule()); }
	 iv_ruleEquality=ruleEquality 
	 { $current=$iv_ruleEquality.current; } 
	 EOF 
;

// Rule Equality
ruleEquality returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    { 
        newCompositeNode(grammarAccess.getEqualityAccess().getFloatExprParserRuleCall_0_0()); 
    }
    this_FloatExpr_0=ruleFloatExpr
    { 
        $current = $this_FloatExpr_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityAccess().getEqualityLeftAction_0_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'==' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_0_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'!=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_0_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityAccess().getRightFloatExprParserRuleCall_0_1_2_0()); 
	    }
		lv_right_3_0=ruleFloatExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"FloatExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
    |(
    { 
        newCompositeNode(grammarAccess.getEqualityAccess().getStringExprParserRuleCall_1_0()); 
    }
    this_StringExpr_4=ruleStringExpr
    { 
        $current = $this_StringExpr_4.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getEqualityAccess().getEqualityLeftAction_1_1_0(),
            $current);
    }
)(
(
(
		lv_op_6_1=	'==' 
    {
        newLeafNode(lv_op_6_1, grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_6_1, null);
	    }

    |		lv_op_6_2=	'!=' 
    {
        newLeafNode(lv_op_6_2, grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_6_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getEqualityAccess().getRightStringExprParserRuleCall_1_1_2_0()); 
	    }
		lv_right_7_0=ruleStringExpr		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getEqualityRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_7_0, 
        		"StringExpr");
	        afterParserOrEnumRuleCall();
	    }

)
))*))
;







// Entry rule entryRuleFloatExpr
entryRuleFloatExpr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFloatExprRule()); }
	 iv_ruleFloatExpr=ruleFloatExpr 
	 { $current=$iv_ruleFloatExpr.current; } 
	 EOF 
;

// Rule FloatExpr
ruleFloatExpr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_valueDirect_0_0=RULE_FLOAT
		{
			newLeafNode(lv_valueDirect_0_0, grammarAccess.getFloatExprAccess().getValueDirectFLOATTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFloatExprRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"valueDirect",
        		lv_valueDirect_0_0, 
        		"FLOAT");
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getFloatExprAccess().getValueOfFluentFluentWhoseValueParserRuleCall_1_0()); 
	    }
		lv_valueOfFluent_1_0=ruleFluentWhoseValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFloatExprRule());
	        }
       		set(
       			$current, 
       			"valueOfFluent",
        		lv_valueOfFluent_1_0, 
        		"FluentWhoseValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPlusOrMinusRule()); }
	 iv_rulePlusOrMinus=rulePlusOrMinus 
	 { $current=$iv_rulePlusOrMinus.current; } 
	 EOF 
;

// Rule PlusOrMinus
rulePlusOrMinus returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); 
    }
    this_MulOrDiv_0=ruleMulOrDiv
    { 
        $current = $this_MulOrDiv_0.current; 
        afterParserOrEnumRuleCall();
    }
((((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1());
    }
)
    |((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0(),
            $current);
    }
)	otherlv_4='-' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0()); 
	    }
		lv_right_5_0=ruleMulOrDiv		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPlusOrMinusRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_5_0, 
        		"MulOrDiv");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMulOrDivRule()); }
	 iv_ruleMulOrDiv=ruleMulOrDiv 
	 { $current=$iv_ruleMulOrDiv.current; } 
	 EOF 
;

// Rule MulOrDiv
ruleMulOrDiv returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0()); 
    }
    this_Primary_0=rulePrimary
    { 
        $current = $this_Primary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'*' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulOrDivRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'/' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulOrDivRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'%' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getMulOrDivAccess().getOpPercentSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulOrDivRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'^' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getMulOrDivAccess().getOpCircumflexAccentKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMulOrDivRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMulOrDivRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Primary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	 iv_rulePrimary=rulePrimary 
	 { $current=$iv_rulePrimary.current; } 
	 EOF 
;

// Rule Primary
rulePrimary returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_valueDirect_0_0=RULE_FLOAT
		{
			newLeafNode(lv_valueDirect_0_0, grammarAccess.getPrimaryAccess().getValueDirectFLOATTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrimaryRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"valueDirect",
        		lv_valueDirect_0_0, 
        		"FLOAT");
	    }

)
)
;





// Entry rule entryRuleFluentWhoseValue
entryRuleFluentWhoseValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFluentWhoseValueRule()); }
	 iv_ruleFluentWhoseValue=ruleFluentWhoseValue 
	 { $current=$iv_ruleFluentWhoseValue.current; } 
	 EOF 
;

// Rule FluentWhoseValue
ruleFluentWhoseValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_fluentWhoseValueName_0_0=RULE_ID
		{
			newLeafNode(lv_fluentWhoseValueName_0_0, grammarAccess.getFluentWhoseValueAccess().getFluentWhoseValueNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFluentWhoseValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"fluentWhoseValueName",
        		lv_fluentWhoseValueName_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleStr
entryRuleStr returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStrRule()); }
	 iv_ruleStr=ruleStr 
	 { $current=$iv_ruleStr.current; } 
	 EOF 
;

// Rule Str
ruleStr returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_value_0_0=RULE_STRING
		{
			newLeafNode(lv_value_0_0, grammarAccess.getStrAccess().getValueSTRINGTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStrRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"STRING");
	    }

)
)
;





// Entry rule entryRuleInRule
entryRuleInRule returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getInRuleRule()); }
	 iv_ruleInRule=ruleInRule 
	 { $current=$iv_ruleInRule.current; } 
	 EOF 
;

// Rule InRule
ruleInRule returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_time_0_0=RULE_INT
		{
			newLeafNode(lv_time_0_0, grammarAccess.getInRuleAccess().getTimeINTTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInRuleRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"time",
        		lv_time_0_0, 
        		"INT");
	    }

)
)
    |(
(
		lv_currentTime_1_0=	'now' 
    {
        newLeafNode(lv_currentTime_1_0, grammarAccess.getInRuleAccess().getCurrentTimeNowKeyword_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getInRuleRule());
	        }
       		setWithLastConsumed($current, "currentTime", lv_currentTime_1_0, "now");
	    }

)
))
;







RULE_FLOAT : ('0'..'9')* '.' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


