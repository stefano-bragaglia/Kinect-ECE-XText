/*
* generated by Xtext
*/
grammar InternalEce;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
	
}

@lexer::header {
package org.xtext.ecerule.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.ecerule.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.xtext.ecerule.services.EceGrammarAccess;

}

@parser::members {
 
 	private EceGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(EceGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDroolsModel
entryRuleDroolsModel 
:
{ before(grammarAccess.getDroolsModelRule()); }
	 ruleDroolsModel
{ after(grammarAccess.getDroolsModelRule()); } 
	 EOF 
;

// Rule DroolsModel
ruleDroolsModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDroolsModelAccess().getStatementsAssignment()); }
(rule__DroolsModel__StatementsAssignment)*
{ after(grammarAccess.getDroolsModelAccess().getStatementsAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStatement
entryRuleStatement 
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStatementAccess().getGroup()); }
(rule__Statement__Group__0)
{ after(grammarAccess.getStatementAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvent
entryRuleEvent 
:
{ before(grammarAccess.getEventRule()); }
	 ruleEvent
{ after(grammarAccess.getEventRule()); } 
	 EOF 
;

// Rule Event
ruleEvent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEventAccess().getEventNameAssignment()); }
(rule__Event__EventNameAssignment)
{ after(grammarAccess.getEventAccess().getEventNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFluent
entryRuleFluent 
:
{ before(grammarAccess.getFluentRule()); }
	 ruleFluent
{ after(grammarAccess.getFluentRule()); } 
	 EOF 
;

// Rule Fluent
ruleFluent
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFluentAccess().getGroup()); }
(rule__Fluent__Group__0)
{ after(grammarAccess.getFluentAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleToRule
entryRuleToRule 
:
{ before(grammarAccess.getToRuleRule()); }
	 ruleToRule
{ after(grammarAccess.getToRuleRule()); } 
	 EOF 
;

// Rule ToRule
ruleToRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getToRuleAccess().getAlternatives()); }
(rule__ToRule__Alternatives)
{ after(grammarAccess.getToRuleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringExpr
entryRuleStringExpr 
:
{ before(grammarAccess.getStringExprRule()); }
	 ruleStringExpr
{ after(grammarAccess.getStringExprRule()); } 
	 EOF 
;

// Rule StringExpr
ruleStringExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringExprAccess().getAlternatives()); }
(rule__StringExpr__Alternatives)
{ after(grammarAccess.getStringExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBoolExpr
entryRuleBoolExpr 
:
{ before(grammarAccess.getBoolExprRule()); }
	 ruleBoolExpr
{ after(grammarAccess.getBoolExprRule()); } 
	 EOF 
;

// Rule BoolExpr
ruleBoolExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBoolExprAccess().getAlternatives()); }
(rule__BoolExpr__Alternatives)
{ after(grammarAccess.getBoolExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOr
entryRuleOr 
:
{ before(grammarAccess.getOrRule()); }
	 ruleOr
{ after(grammarAccess.getOrRule()); } 
	 EOF 
;

// Rule Or
ruleOr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrAccess().getGroup()); }
(rule__Or__Group__0)
{ after(grammarAccess.getOrAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAnd
entryRuleAnd 
:
{ before(grammarAccess.getAndRule()); }
	 ruleAnd
{ after(grammarAccess.getAndRule()); } 
	 EOF 
;

// Rule And
ruleAnd
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndAccess().getAlternatives()); }
(rule__And__Alternatives)
{ after(grammarAccess.getAndAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEquality
entryRuleEquality 
:
{ before(grammarAccess.getEqualityRule()); }
	 ruleEquality
{ after(grammarAccess.getEqualityRule()); } 
	 EOF 
;

// Rule Equality
ruleEquality
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEqualityAccess().getAlternatives()); }
(rule__Equality__Alternatives)
{ after(grammarAccess.getEqualityAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleComparison
entryRuleComparison 
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getComparisonAccess().getGroup()); }
(rule__Comparison__Group__0)
{ after(grammarAccess.getComparisonAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleswitchExpr
entryRuleswitchExpr 
:
{ before(grammarAccess.getSwitchExprRule()); }
	 ruleswitchExpr
{ after(grammarAccess.getSwitchExprRule()); } 
	 EOF 
;

// Rule switchExpr
ruleswitchExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSwitchExprAccess().getValueAssignment()); }
(rule__SwitchExpr__ValueAssignment)
{ after(grammarAccess.getSwitchExprAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMutationExpr
entryRuleMutationExpr 
:
{ before(grammarAccess.getMutationExprRule()); }
	 ruleMutationExpr
{ after(grammarAccess.getMutationExprRule()); } 
	 EOF 
;

// Rule MutationExpr
ruleMutationExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMutationExprAccess().getGroup()); }
(rule__MutationExpr__Group__0)
{ after(grammarAccess.getMutationExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFloatExpr
entryRuleFloatExpr 
:
{ before(grammarAccess.getFloatExprRule()); }
	 ruleFloatExpr
{ after(grammarAccess.getFloatExprRule()); } 
	 EOF 
;

// Rule FloatExpr
ruleFloatExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFloatExprAccess().getAlternatives()); }
(rule__FloatExpr__Alternatives)
{ after(grammarAccess.getFloatExprAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePlusOrMinus
entryRulePlusOrMinus 
:
{ before(grammarAccess.getPlusOrMinusRule()); }
	 rulePlusOrMinus
{ after(grammarAccess.getPlusOrMinusRule()); } 
	 EOF 
;

// Rule PlusOrMinus
rulePlusOrMinus
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPlusOrMinusAccess().getGroup()); }
(rule__PlusOrMinus__Group__0)
{ after(grammarAccess.getPlusOrMinusAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMulOrDiv
entryRuleMulOrDiv 
:
{ before(grammarAccess.getMulOrDivRule()); }
	 ruleMulOrDiv
{ after(grammarAccess.getMulOrDivRule()); } 
	 EOF 
;

// Rule MulOrDiv
ruleMulOrDiv
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMulOrDivAccess().getGroup()); }
(rule__MulOrDiv__Group__0)
{ after(grammarAccess.getMulOrDivAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrimary
entryRulePrimary 
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
(rule__Primary__Alternatives)
{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFluentWhoseValue
entryRuleFluentWhoseValue 
:
{ before(grammarAccess.getFluentWhoseValueRule()); }
	 ruleFluentWhoseValue
{ after(grammarAccess.getFluentWhoseValueRule()); } 
	 EOF 
;

// Rule FluentWhoseValue
ruleFluentWhoseValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFluentWhoseValueAccess().getFluentWhoseValueNameAssignment()); }
(rule__FluentWhoseValue__FluentWhoseValueNameAssignment)
{ after(grammarAccess.getFluentWhoseValueAccess().getFluentWhoseValueNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStr
entryRuleStr 
:
{ before(grammarAccess.getStrRule()); }
	 ruleStr
{ after(grammarAccess.getStrRule()); } 
	 EOF 
;

// Rule Str
ruleStr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStrAccess().getValueAssignment()); }
(rule__Str__ValueAssignment)
{ after(grammarAccess.getStrAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInRule
entryRuleInRule 
:
{ before(grammarAccess.getInRuleRule()); }
	 ruleInRule
{ after(grammarAccess.getInRuleRule()); } 
	 EOF 
;

// Rule InRule
ruleInRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInRuleAccess().getAlternatives()); }
(rule__InRule__Alternatives)
{ after(grammarAccess.getInRuleAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConditionRule
entryRuleConditionRule 
:
{ before(grammarAccess.getConditionRuleRule()); }
	 ruleConditionRule
{ after(grammarAccess.getConditionRuleRule()); } 
	 EOF 
;

// Rule ConditionRule
ruleConditionRule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConditionRuleAccess().getConditionAssignment()); }
(rule__ConditionRule__ConditionAssignment)
{ after(grammarAccess.getConditionRuleAccess().getConditionAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__ToRule__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToRuleAccess().getExpressionAssignment_0()); }
(rule__ToRule__ExpressionAssignment_0)
{ after(grammarAccess.getToRuleAccess().getExpressionAssignment_0()); }
)

    |(
{ before(grammarAccess.getToRuleAccess().getExpressionAssignment_1()); }
(rule__ToRule__ExpressionAssignment_1)
{ after(grammarAccess.getToRuleAccess().getExpressionAssignment_1()); }
)

    |(
{ before(grammarAccess.getToRuleAccess().getExpressionAssignment_2()); }
(rule__ToRule__ExpressionAssignment_2)
{ after(grammarAccess.getToRuleAccess().getExpressionAssignment_2()); }
)

    |(
{ before(grammarAccess.getToRuleAccess().getGroup_3()); }
(rule__ToRule__Group_3__0)
{ after(grammarAccess.getToRuleAccess().getGroup_3()); }
)

    |(
{ before(grammarAccess.getToRuleAccess().getExpressionAssignment_4()); }
(rule__ToRule__ExpressionAssignment_4)
{ after(grammarAccess.getToRuleAccess().getExpressionAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringExprAccess().getStrParserRuleCall_0()); }
	ruleStr
{ after(grammarAccess.getStringExprAccess().getStrParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getStringExprAccess().getFluentWhoseValueParserRuleCall_1()); }
	ruleFluentWhoseValue
{ after(grammarAccess.getStringExprAccess().getFluentWhoseValueParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolExprAccess().getValueAssignment_0()); }
(rule__BoolExpr__ValueAssignment_0)
{ after(grammarAccess.getBoolExprAccess().getValueAssignment_0()); }
)

    |(
{ before(grammarAccess.getBoolExprAccess().getValueAssignment_1()); }
(rule__BoolExpr__ValueAssignment_1)
{ after(grammarAccess.getBoolExprAccess().getValueAssignment_1()); }
)

    |(
{ before(grammarAccess.getBoolExprAccess().getOrParserRuleCall_2()); }
	ruleOr
{ after(grammarAccess.getBoolExprAccess().getOrParserRuleCall_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_0()); }
(rule__And__Group_0__0)
{ after(grammarAccess.getAndAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getAndAccess().getGroup_1()); }
(rule__And__Group_1__0)
{ after(grammarAccess.getAndAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getAndAccess().getGroup_2()); }
(rule__And__Group_2__0)
{ after(grammarAccess.getAndAccess().getGroup_2()); }
)

    |(
{ before(grammarAccess.getAndAccess().getGroup_3()); }
(rule__And__Group_3__0)
{ after(grammarAccess.getAndAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getGroup_0()); }
(rule__Equality__Group_0__0)
{ after(grammarAccess.getEqualityAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getGroup_1()); }
(rule__Equality__Group_1__0)
{ after(grammarAccess.getEqualityAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAlternatives_0_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_0_1_1_0_0()); }

	'==' 

{ after(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_0_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_0_1_1_0_1()); }

	'!=' 

{ after(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_0_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAlternatives_1_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_1_0_0()); }

	'==' 

{ after(grammarAccess.getEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_1_0_1()); }

	'!=' 

{ after(grammarAccess.getEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }

	'>=' 

{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }

	'<=' 

{ after(grammarAccess.getComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }

	'>' 

{ after(grammarAccess.getComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }

	'<' 

{ after(grammarAccess.getComparisonAccess().getOpLessThanSignKeyword_1_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MutationExpr__ValueAlternatives_0_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutationExprAccess().getValuePlusSignKeyword_0_0_0()); }

	'+' 

{ after(grammarAccess.getMutationExprAccess().getValuePlusSignKeyword_0_0_0()); }
)

    |(
{ before(grammarAccess.getMutationExprAccess().getValueHyphenMinusKeyword_0_0_1()); }

	'-' 

{ after(grammarAccess.getMutationExprAccess().getValueHyphenMinusKeyword_0_0_1()); }
)

    |(
{ before(grammarAccess.getMutationExprAccess().getValueAsteriskKeyword_0_0_2()); }

	'*' 

{ after(grammarAccess.getMutationExprAccess().getValueAsteriskKeyword_0_0_2()); }
)

    |(
{ before(grammarAccess.getMutationExprAccess().getValueSolidusKeyword_0_0_3()); }

	'/' 

{ after(grammarAccess.getMutationExprAccess().getValueSolidusKeyword_0_0_3()); }
)

    |(
{ before(grammarAccess.getMutationExprAccess().getValueCircumflexAccentKeyword_0_0_4()); }

	'^' 

{ after(grammarAccess.getMutationExprAccess().getValueCircumflexAccentKeyword_0_0_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatExpr__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatExprAccess().getValueDirectAssignment_0()); }
(rule__FloatExpr__ValueDirectAssignment_0)
{ after(grammarAccess.getFloatExprAccess().getValueDirectAssignment_0()); }
)

    |(
{ before(grammarAccess.getFloatExprAccess().getValueCalculatedAssignment_1()); }
(rule__FloatExpr__ValueCalculatedAssignment_1)
{ after(grammarAccess.getFloatExprAccess().getValueCalculatedAssignment_1()); }
)

    |(
{ before(grammarAccess.getFloatExprAccess().getValueOfFluentAssignment_2()); }
(rule__FloatExpr__ValueOfFluentAssignment_2)
{ after(grammarAccess.getFloatExprAccess().getValueOfFluentAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Alternatives_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0()); }
(rule__PlusOrMinus__Group_1_0_0__0)
{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0()); }
)

    |(
{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1()); }
(rule__PlusOrMinus__Group_1_0_1__0)
{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__OpAlternatives_1_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0()); }

	'*' 

{ after(grammarAccess.getMulOrDivAccess().getOpAsteriskKeyword_1_1_0_0()); }
)

    |(
{ before(grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1()); }

	'/' 

{ after(grammarAccess.getMulOrDivAccess().getOpSolidusKeyword_1_1_0_1()); }
)

    |(
{ before(grammarAccess.getMulOrDivAccess().getOpPercentSignKeyword_1_1_0_2()); }

	'%' 

{ after(grammarAccess.getMulOrDivAccess().getOpPercentSignKeyword_1_1_0_2()); }
)

    |(
{ before(grammarAccess.getMulOrDivAccess().getOpCircumflexAccentKeyword_1_1_0_3()); }

	'^' 

{ after(grammarAccess.getMulOrDivAccess().getOpCircumflexAccentKeyword_1_1_0_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getValueDirectAssignment_0()); }
(rule__Primary__ValueDirectAssignment_0)
{ after(grammarAccess.getPrimaryAccess().getValueDirectAssignment_0()); }
)

    |(
{ before(grammarAccess.getPrimaryAccess().getValueOfFluentAssignment_1()); }
(rule__Primary__ValueOfFluentAssignment_1)
{ after(grammarAccess.getPrimaryAccess().getValueOfFluentAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InRule__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInRuleAccess().getTimeAssignment_0()); }
(rule__InRule__TimeAssignment_0)
{ after(grammarAccess.getInRuleAccess().getTimeAssignment_0()); }
)

    |(
{ before(grammarAccess.getInRuleAccess().getCurrentTimeAssignment_1()); }
(rule__InRule__CurrentTimeAssignment_1)
{ after(grammarAccess.getInRuleAccess().getCurrentTimeAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Statement__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__0__Impl
	rule__Statement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getOnKeyword_0()); }

	'on' 

{ after(grammarAccess.getStatementAccess().getOnKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__1__Impl
	rule__Statement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getEventAssignment_1()); }
(rule__Statement__EventAssignment_1)
{ after(grammarAccess.getStatementAccess().getEventAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__2__Impl
	rule__Statement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSetKeyword_2()); }

	'set' 

{ after(grammarAccess.getStatementAccess().getSetKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__3__Impl
	rule__Statement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getFluentAssignment_3()); }
(rule__Statement__FluentAssignment_3)
{ after(grammarAccess.getStatementAccess().getFluentAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__4__Impl
	rule__Statement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getGroup_4()); }
(rule__Statement__Group_4__0)*
{ after(grammarAccess.getStatementAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getSemicolonKeyword_5()); }

	';' 

{ after(grammarAccess.getStatementAccess().getSemicolonKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Statement__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_4__0__Impl
	rule__Statement__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getCommaKeyword_4_0()); }

	',' 

{ after(grammarAccess.getStatementAccess().getCommaKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Statement__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Statement__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getFluentAssignment_4_1()); }
(rule__Statement__FluentAssignment_4_1)
{ after(grammarAccess.getStatementAccess().getFluentAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fluent__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fluent__Group__0__Impl
	rule__Fluent__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getFluentNameAssignment_0()); }
(rule__Fluent__FluentNameAssignment_0)
{ after(grammarAccess.getFluentAccess().getFluentNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fluent__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fluent__Group__1__Impl
	rule__Fluent__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getGroup_1()); }
(rule__Fluent__Group_1__0)
{ after(grammarAccess.getFluentAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fluent__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fluent__Group__2__Impl
	rule__Fluent__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getGroup_2()); }
(rule__Fluent__Group_2__0)?
{ after(grammarAccess.getFluentAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fluent__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fluent__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getGroup_3()); }
(rule__Fluent__Group_3__0)?
{ after(grammarAccess.getFluentAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Fluent__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fluent__Group_1__0__Impl
	rule__Fluent__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getToKeyword_1_0()); }

	'to' 

{ after(grammarAccess.getFluentAccess().getToKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fluent__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fluent__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getValuePartAssignment_1_1()); }
(rule__Fluent__ValuePartAssignment_1_1)
{ after(grammarAccess.getFluentAccess().getValuePartAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fluent__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fluent__Group_2__0__Impl
	rule__Fluent__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getInKeyword_2_0()); }

	'in' 

{ after(grammarAccess.getFluentAccess().getInKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fluent__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fluent__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getTimePartAssignment_2_1()); }
(rule__Fluent__TimePartAssignment_2_1)
{ after(grammarAccess.getFluentAccess().getTimePartAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Fluent__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fluent__Group_3__0__Impl
	rule__Fluent__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getIfKeyword_3_0()); }

	'if' 

{ after(grammarAccess.getFluentAccess().getIfKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Fluent__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Fluent__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getCondPartAssignment_3_1()); }
(rule__Fluent__CondPartAssignment_3_1)
{ after(grammarAccess.getFluentAccess().getCondPartAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ToRule__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ToRule__Group_3__0__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ToRule__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToRuleAccess().getExpressionAssignment_3_0()); }
(rule__ToRule__ExpressionAssignment_3_0)
{ after(grammarAccess.getToRuleAccess().getExpressionAssignment_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}




rule__Or__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__0__Impl
	rule__Or__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
	ruleAnd
{ after(grammarAccess.getOrAccess().getAndParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getGroup_1()); }
(rule__Or__Group_1__0)*
{ after(grammarAccess.getOrAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Or__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__0__Impl
	rule__Or__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
(

)
{ after(grammarAccess.getOrAccess().getOrLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__1__Impl
	rule__Or__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getORKeyword_1_1()); }

	'OR' 

{ after(grammarAccess.getOrAccess().getORKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Or__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Or__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Or__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
(rule__Or__RightAssignment_1_2)
{ after(grammarAccess.getOrAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__And__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_0__0__Impl
	rule__And__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getEqualityParserRuleCall_0_0()); }
	ruleEquality
{ after(grammarAccess.getAndAccess().getEqualityParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_0_1()); }
(rule__And__Group_0_1__0)*
{ after(grammarAccess.getAndAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_0_1__0__Impl
	rule__And__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndLeftAction_0_1_0()); }
(

)
{ after(grammarAccess.getAndAccess().getAndLeftAction_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_0_1__1__Impl
	rule__And__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getANDKeyword_0_1_1()); }

	'AND' 

{ after(grammarAccess.getAndAccess().getANDKeyword_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightAssignment_0_1_2()); }
(rule__And__RightAssignment_0_1_2)
{ after(grammarAccess.getAndAccess().getRightAssignment_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__And__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__0__Impl
	rule__And__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getEqualityParserRuleCall_1_0()); }
(	ruleEquality)
{ after(grammarAccess.getAndAccess().getEqualityParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_1_1()); }
(rule__And__Group_1_1__0)*
{ after(grammarAccess.getAndAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1_1__0__Impl
	rule__And__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndLeftAction_1_1_0()); }
(

)
{ after(grammarAccess.getAndAccess().getAndLeftAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1_1__1__Impl
	rule__And__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getANDKeyword_1_1_1()); }

	'AND' 

{ after(grammarAccess.getAndAccess().getANDKeyword_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightAssignment_1_1_2()); }
(rule__And__RightAssignment_1_1_2)
{ after(grammarAccess.getAndAccess().getRightAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__And__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_2__0__Impl
	rule__And__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getComparisonParserRuleCall_2_0()); }
(	ruleComparison)
{ after(grammarAccess.getAndAccess().getComparisonParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_2_1()); }
(rule__And__Group_2_1__0)*
{ after(grammarAccess.getAndAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_2_1__0__Impl
	rule__And__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndLeftAction_2_1_0()); }
(

)
{ after(grammarAccess.getAndAccess().getAndLeftAction_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_2_1__1__Impl
	rule__And__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getANDKeyword_2_1_1()); }

	'AND' 

{ after(grammarAccess.getAndAccess().getANDKeyword_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_2_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_2_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightAssignment_2_1_2()); }
(rule__And__RightAssignment_2_1_2)
{ after(grammarAccess.getAndAccess().getRightAssignment_2_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__And__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_3__0__Impl
	rule__And__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getComparisonParserRuleCall_3_0()); }
(	ruleComparison)
{ after(grammarAccess.getAndAccess().getComparisonParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getGroup_3_1()); }
(rule__And__Group_3_1__0)*
{ after(grammarAccess.getAndAccess().getGroup_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__And__Group_3_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_3_1__0__Impl
	rule__And__Group_3_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_3_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getAndLeftAction_3_1_0()); }
(

)
{ after(grammarAccess.getAndAccess().getAndLeftAction_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_3_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_3_1__1__Impl
	rule__And__Group_3_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_3_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getANDKeyword_3_1_1()); }

	'AND' 

{ after(grammarAccess.getAndAccess().getANDKeyword_3_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__And__Group_3_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__And__Group_3_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__And__Group_3_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightAssignment_3_1_2()); }
(rule__And__RightAssignment_3_1_2)
{ after(grammarAccess.getAndAccess().getRightAssignment_3_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Equality__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_0__0__Impl
	rule__Equality__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getFloatExprParserRuleCall_0_0()); }
	ruleFloatExpr
{ after(grammarAccess.getEqualityAccess().getFloatExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getGroup_0_1()); }
(rule__Equality__Group_0_1__0)
{ after(grammarAccess.getEqualityAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_0_1__0__Impl
	rule__Equality__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getEqualityLeftAction_0_1_0()); }
(

)
{ after(grammarAccess.getEqualityAccess().getEqualityLeftAction_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_0_1__1__Impl
	rule__Equality__Group_0_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getOpAssignment_0_1_1()); }
(rule__Equality__OpAssignment_0_1_1)
{ after(grammarAccess.getEqualityAccess().getOpAssignment_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_0_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_0_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_0_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_0_1_2()); }
(rule__Equality__RightAssignment_0_1_2)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_0_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Equality__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1__0__Impl
	rule__Equality__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getStringExprParserRuleCall_1_0()); }
(	ruleStringExpr)
{ after(grammarAccess.getEqualityAccess().getStringExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getGroup_1_1()); }
(rule__Equality__Group_1_1__0)*
{ after(grammarAccess.getEqualityAccess().getGroup_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Equality__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1_1__0__Impl
	rule__Equality__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_1_0()); }
(

)
{ after(grammarAccess.getEqualityAccess().getEqualityLeftAction_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1_1__1__Impl
	rule__Equality__Group_1_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getOpAssignment_1_1_1()); }
(rule__Equality__OpAssignment_1_1_1)
{ after(grammarAccess.getEqualityAccess().getOpAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Equality__Group_1_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Equality__Group_1_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__Group_1_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightAssignment_1_1_2()); }
(rule__Equality__RightAssignment_1_1_2)
{ after(grammarAccess.getEqualityAccess().getRightAssignment_1_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Comparison__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0()); }
	rulePlusOrMinus
{ after(grammarAccess.getComparisonAccess().getPlusOrMinusParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getGroup_1()); }
(rule__Comparison__Group_1__0)*
{ after(grammarAccess.getComparisonAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Comparison__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__0__Impl
	rule__Comparison__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
(

)
{ after(grammarAccess.getComparisonAccess().getComparisonLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__1__Impl
	rule__Comparison__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
(rule__Comparison__OpAssignment_1_1)
{ after(grammarAccess.getComparisonAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Comparison__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
(rule__Comparison__RightAssignment_1_2)
{ after(grammarAccess.getComparisonAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__MutationExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MutationExpr__Group__0__Impl
	rule__MutationExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MutationExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutationExprAccess().getValueAssignment_0()); }
(rule__MutationExpr__ValueAssignment_0)
{ after(grammarAccess.getMutationExprAccess().getValueAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MutationExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MutationExpr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MutationExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutationExprAccess().getFLOATTerminalRuleCall_1()); }
	RULE_FLOAT
{ after(grammarAccess.getMutationExprAccess().getFLOATTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PlusOrMinus__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOrMinus__Group__0__Impl
	rule__PlusOrMinus__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); }
	ruleMulOrDiv
{ after(grammarAccess.getPlusOrMinusAccess().getMulOrDivParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOrMinus__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOrMinusAccess().getGroup_1()); }
(rule__PlusOrMinus__Group_1__0)*
{ after(grammarAccess.getPlusOrMinusAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PlusOrMinus__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOrMinus__Group_1__0__Impl
	rule__PlusOrMinus__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0()); }
(rule__PlusOrMinus__Alternatives_1_0)
{ after(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOrMinus__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1()); }
(rule__PlusOrMinus__RightAssignment_1_1)
{ after(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PlusOrMinus__Group_1_0_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOrMinus__Group_1_0_0__0__Impl
	rule__PlusOrMinus__Group_1_0_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0()); }
(

)
{ after(grammarAccess.getPlusOrMinusAccess().getPlusLeftAction_1_0_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1_0_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOrMinus__Group_1_0_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1()); }

	'+' 

{ after(grammarAccess.getPlusOrMinusAccess().getPlusSignKeyword_1_0_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PlusOrMinus__Group_1_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOrMinus__Group_1_0_1__0__Impl
	rule__PlusOrMinus__Group_1_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0()); }
(

)
{ after(grammarAccess.getPlusOrMinusAccess().getMinusLeftAction_1_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PlusOrMinus__Group_1_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PlusOrMinus__Group_1_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__Group_1_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1()); }

	'-' 

{ after(grammarAccess.getPlusOrMinusAccess().getHyphenMinusKeyword_1_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MulOrDiv__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MulOrDiv__Group__0__Impl
	rule__MulOrDiv__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
{ after(grammarAccess.getMulOrDivAccess().getPrimaryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDiv__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MulOrDiv__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulOrDivAccess().getGroup_1()); }
(rule__MulOrDiv__Group_1__0)*
{ after(grammarAccess.getMulOrDivAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MulOrDiv__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MulOrDiv__Group_1__0__Impl
	rule__MulOrDiv__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0()); }
(

)
{ after(grammarAccess.getMulOrDivAccess().getMulOrDivLeftAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDiv__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MulOrDiv__Group_1__1__Impl
	rule__MulOrDiv__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1()); }
(rule__MulOrDiv__OpAssignment_1_1)
{ after(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MulOrDiv__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MulOrDiv__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2()); }
(rule__MulOrDiv__RightAssignment_1_2)
{ after(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__DroolsModel__StatementsAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDroolsModelAccess().getStatementsStatementParserRuleCall_0()); }
	ruleStatement{ after(grammarAccess.getDroolsModelAccess().getStatementsStatementParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__EventAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getEventEventParserRuleCall_1_0()); }
	ruleEvent{ after(grammarAccess.getStatementAccess().getEventEventParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__FluentAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getFluentFluentParserRuleCall_3_0()); }
	ruleFluent{ after(grammarAccess.getStatementAccess().getFluentFluentParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__FluentAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStatementAccess().getFluentFluentParserRuleCall_4_1_0()); }
	ruleFluent{ after(grammarAccess.getStatementAccess().getFluentFluentParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Event__EventNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEventAccess().getEventNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getEventAccess().getEventNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__FluentNameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getFluentNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFluentAccess().getFluentNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__ValuePartAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getValuePartToRuleParserRuleCall_1_1_0()); }
	ruleToRule{ after(grammarAccess.getFluentAccess().getValuePartToRuleParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__TimePartAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getTimePartInRuleParserRuleCall_2_1_0()); }
	ruleInRule{ after(grammarAccess.getFluentAccess().getTimePartInRuleParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Fluent__CondPartAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentAccess().getCondPartConditionRuleParserRuleCall_3_1_0()); }
	ruleConditionRule{ after(grammarAccess.getFluentAccess().getCondPartConditionRuleParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ToRule__ExpressionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToRuleAccess().getExpressionStringExprParserRuleCall_0_0()); }
	ruleStringExpr{ after(grammarAccess.getToRuleAccess().getExpressionStringExprParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ToRule__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToRuleAccess().getExpressionBoolExprParserRuleCall_1_0()); }
	ruleBoolExpr{ after(grammarAccess.getToRuleAccess().getExpressionBoolExprParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ToRule__ExpressionAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToRuleAccess().getExpressionSwitchExprParserRuleCall_2_0()); }
	ruleswitchExpr{ after(grammarAccess.getToRuleAccess().getExpressionSwitchExprParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ToRule__ExpressionAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToRuleAccess().getExpressionFloatExprParserRuleCall_3_0_0()); }
	ruleFloatExpr{ after(grammarAccess.getToRuleAccess().getExpressionFloatExprParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ToRule__ExpressionAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getToRuleAccess().getExpressionMutationExprParserRuleCall_4_0()); }
	ruleMutationExpr{ after(grammarAccess.getToRuleAccess().getExpressionMutationExprParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpr__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolExprAccess().getValueTrueKeyword_0_0()); }
(
{ before(grammarAccess.getBoolExprAccess().getValueTrueKeyword_0_0()); }

	'true' 

{ after(grammarAccess.getBoolExprAccess().getValueTrueKeyword_0_0()); }
)

{ after(grammarAccess.getBoolExprAccess().getValueTrueKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BoolExpr__ValueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBoolExprAccess().getValueFalseKeyword_1_0()); }
(
{ before(grammarAccess.getBoolExprAccess().getValueFalseKeyword_1_0()); }

	'false' 

{ after(grammarAccess.getBoolExprAccess().getValueFalseKeyword_1_0()); }
)

{ after(grammarAccess.getBoolExprAccess().getValueFalseKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Or__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
	ruleAnd{ after(grammarAccess.getOrAccess().getRightAndParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_0_1_2_0()); }
	ruleEquality{ after(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightComparisonParserRuleCall_1_1_2_0()); }
	ruleComparison{ after(grammarAccess.getAndAccess().getRightComparisonParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_2_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightComparisonParserRuleCall_2_1_2_0()); }
	ruleComparison{ after(grammarAccess.getAndAccess().getRightComparisonParserRuleCall_2_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__And__RightAssignment_3_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_3_1_2_0()); }
	ruleEquality{ after(grammarAccess.getAndAccess().getRightEqualityParserRuleCall_3_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAssignment_0_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getOpAlternatives_0_1_1_0()); }
(rule__Equality__OpAlternatives_0_1_1_0)
{ after(grammarAccess.getEqualityAccess().getOpAlternatives_0_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_0_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightFloatExprParserRuleCall_0_1_2_0()); }
	ruleFloatExpr{ after(grammarAccess.getEqualityAccess().getRightFloatExprParserRuleCall_0_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__OpAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_1_0()); }
(rule__Equality__OpAlternatives_1_1_1_0)
{ after(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Equality__RightAssignment_1_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEqualityAccess().getRightStringExprParserRuleCall_1_1_2_0()); }
	ruleStringExpr{ after(grammarAccess.getEqualityAccess().getRightStringExprParserRuleCall_1_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
(rule__Comparison__OpAlternatives_1_1_0)
{ after(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0()); }
	rulePlusOrMinus{ after(grammarAccess.getComparisonAccess().getRightPlusOrMinusParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SwitchExpr__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSwitchExprAccess().getValueSwitchKeyword_0()); }
(
{ before(grammarAccess.getSwitchExprAccess().getValueSwitchKeyword_0()); }

	'switch' 

{ after(grammarAccess.getSwitchExprAccess().getValueSwitchKeyword_0()); }
)

{ after(grammarAccess.getSwitchExprAccess().getValueSwitchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MutationExpr__ValueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMutationExprAccess().getValueAlternatives_0_0()); }
(rule__MutationExpr__ValueAlternatives_0_0)
{ after(grammarAccess.getMutationExprAccess().getValueAlternatives_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatExpr__ValueDirectAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatExprAccess().getValueDirectINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getFloatExprAccess().getValueDirectINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatExpr__ValueCalculatedAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatExprAccess().getValueCalculatedPlusOrMinusParserRuleCall_1_0()); }
	rulePlusOrMinus{ after(grammarAccess.getFloatExprAccess().getValueCalculatedPlusOrMinusParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FloatExpr__ValueOfFluentAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFloatExprAccess().getValueOfFluentFluentWhoseValueParserRuleCall_2_0()); }
	ruleFluentWhoseValue{ after(grammarAccess.getFloatExprAccess().getValueOfFluentFluentWhoseValueParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PlusOrMinus__RightAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0()); }
	ruleMulOrDiv{ after(grammarAccess.getPlusOrMinusAccess().getRightMulOrDivParserRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__OpAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0()); }
(rule__MulOrDiv__OpAlternatives_1_1_0)
{ after(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MulOrDiv__RightAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	rulePrimary{ after(grammarAccess.getMulOrDivAccess().getRightPrimaryParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueDirectAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getValueDirectINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getPrimaryAccess().getValueDirectINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__ValueOfFluentAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrimaryAccess().getValueOfFluentFluentWhoseValueParserRuleCall_1_0()); }
	ruleFluentWhoseValue{ after(grammarAccess.getPrimaryAccess().getValueOfFluentFluentWhoseValueParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FluentWhoseValue__FluentWhoseValueNameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFluentWhoseValueAccess().getFluentWhoseValueNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getFluentWhoseValueAccess().getFluentWhoseValueNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Str__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStrAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStrAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InRule__TimeAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInRuleAccess().getTimeINTTerminalRuleCall_0_0()); }
	RULE_INT{ after(grammarAccess.getInRuleAccess().getTimeINTTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InRule__CurrentTimeAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInRuleAccess().getCurrentTimeNowKeyword_1_0()); }
(
{ before(grammarAccess.getInRuleAccess().getCurrentTimeNowKeyword_1_0()); }

	'now' 

{ after(grammarAccess.getInRuleAccess().getCurrentTimeNowKeyword_1_0()); }
)

{ after(grammarAccess.getInRuleAccess().getCurrentTimeNowKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionRule__ConditionAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConditionRuleAccess().getConditionBoolExprParserRuleCall_0()); }
	ruleBoolExpr{ after(grammarAccess.getConditionRuleAccess().getConditionBoolExprParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_FLOAT : ('0'..'9')* '.' ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


