/*
* generated by Xtext
*/
package org.xtext.ecerule.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.ecerule.services.EceGrammarAccess;

public class EceParser extends AbstractContentAssistParser {
	
	@Inject
	private EceGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.ecerule.ui.contentassist.antlr.internal.InternalEceParser createParser() {
		org.xtext.ecerule.ui.contentassist.antlr.internal.InternalEceParser result = new org.xtext.ecerule.ui.contentassist.antlr.internal.InternalEceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getStringExprAccess().getAlternatives(), "rule__StringExpr__Alternatives");
					put(grammarAccess.getBoolExprAccess().getAlternatives(), "rule__BoolExpr__Alternatives");
					put(grammarAccess.getEqualityAccess().getAlternatives(), "rule__Equality__Alternatives");
					put(grammarAccess.getEqualityAccess().getOpAlternatives_0_1_1_0(), "rule__Equality__OpAlternatives_0_1_1_0");
					put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_1_0(), "rule__Equality__OpAlternatives_1_1_1_0");
					put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
					put(grammarAccess.getFloatExprAccess().getAlternatives(), "rule__FloatExpr__Alternatives");
					put(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0(), "rule__PlusOrMinus__Alternatives_1_0");
					put(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0(), "rule__MulOrDiv__OpAlternatives_1_1_0");
					put(grammarAccess.getInRuleAccess().getAlternatives(), "rule__InRule__Alternatives");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getStatementAccess().getGroup_4(), "rule__Statement__Group_4__0");
					put(grammarAccess.getFluentAccess().getGroup(), "rule__Fluent__Group__0");
					put(grammarAccess.getFluentAccess().getGroup_1(), "rule__Fluent__Group_1__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup_0(), "rule__Equality__Group_0__0");
					put(grammarAccess.getEqualityAccess().getGroup_0_1(), "rule__Equality__Group_0_1__0");
					put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup_1_1(), "rule__Equality__Group_1_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0(), "rule__PlusOrMinus__Group_1_0_0__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1(), "rule__PlusOrMinus__Group_1_0_1__0");
					put(grammarAccess.getMulOrDivAccess().getGroup(), "rule__MulOrDiv__Group__0");
					put(grammarAccess.getMulOrDivAccess().getGroup_1(), "rule__MulOrDiv__Group_1__0");
					put(grammarAccess.getExpFluentAccess().getGroup(), "rule__ExpFluent__Group__0");
					put(grammarAccess.getExpFluentAccess().getGroup_1(), "rule__ExpFluent__Group_1__0");
					put(grammarAccess.getExpFluentAccess().getGroup_2(), "rule__ExpFluent__Group_2__0");
					put(grammarAccess.getDroolsModelAccess().getStatementsAssignment(), "rule__DroolsModel__StatementsAssignment");
					put(grammarAccess.getStatementAccess().getEventAssignment_1(), "rule__Statement__EventAssignment_1");
					put(grammarAccess.getStatementAccess().getFluentAssignment_3(), "rule__Statement__FluentAssignment_3");
					put(grammarAccess.getStatementAccess().getFluentAssignment_4_1(), "rule__Statement__FluentAssignment_4_1");
					put(grammarAccess.getEventAccess().getEventNameAssignment(), "rule__Event__EventNameAssignment");
					put(grammarAccess.getFluentAccess().getFluentNameAssignment_0(), "rule__Fluent__FluentNameAssignment_0");
					put(grammarAccess.getFluentAccess().getValuePartAssignment_1_1(), "rule__Fluent__ValuePartAssignment_1_1");
					put(grammarAccess.getToRuleAccess().getExpressionAssignment(), "rule__ToRule__ExpressionAssignment");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getEqualityAccess().getOpAssignment_0_1_1(), "rule__Equality__OpAssignment_0_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_0_1_2(), "rule__Equality__RightAssignment_0_1_2");
					put(grammarAccess.getEqualityAccess().getOpAssignment_1_1_1(), "rule__Equality__OpAssignment_1_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_1_1_2(), "rule__Equality__RightAssignment_1_1_2");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getFloatExprAccess().getValueDirectAssignment_0(), "rule__FloatExpr__ValueDirectAssignment_0");
					put(grammarAccess.getFloatExprAccess().getValueOfFluentAssignment_1(), "rule__FloatExpr__ValueOfFluentAssignment_1");
					put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1(), "rule__PlusOrMinus__RightAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1(), "rule__MulOrDiv__OpAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2(), "rule__MulOrDiv__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getValueDirectAssignment(), "rule__Primary__ValueDirectAssignment");
					put(grammarAccess.getFluentWhoseValueAccess().getFluentWhoseValueNameAssignment(), "rule__FluentWhoseValue__FluentWhoseValueNameAssignment");
					put(grammarAccess.getStrAccess().getValueAssignment(), "rule__Str__ValueAssignment");
					put(grammarAccess.getInRuleAccess().getTimeAssignment_0(), "rule__InRule__TimeAssignment_0");
					put(grammarAccess.getInRuleAccess().getCurrentTimeAssignment_1(), "rule__InRule__CurrentTimeAssignment_1");
					put(grammarAccess.getExpFluentAccess().getFluentNameAssignment_0(), "rule__ExpFluent__FluentNameAssignment_0");
					put(grammarAccess.getExpFluentAccess().getValuePartAssignment_1_1(), "rule__ExpFluent__ValuePartAssignment_1_1");
					put(grammarAccess.getExpFluentAccess().getTimePartAssignment_2_1(), "rule__ExpFluent__TimePartAssignment_2_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.ecerule.ui.contentassist.antlr.internal.InternalEceParser typedParser = (org.xtext.ecerule.ui.contentassist.antlr.internal.InternalEceParser) parser;
			typedParser.entryRuleDroolsModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public EceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
