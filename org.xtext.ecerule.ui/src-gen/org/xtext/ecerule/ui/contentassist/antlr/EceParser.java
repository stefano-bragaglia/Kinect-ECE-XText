/*
* generated by Xtext
*/
package org.xtext.ecerule.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.xtext.ecerule.services.EceGrammarAccess;

public class EceParser extends AbstractContentAssistParser {
	
	@Inject
	private EceGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.xtext.ecerule.ui.contentassist.antlr.internal.InternalEceParser createParser() {
		org.xtext.ecerule.ui.contentassist.antlr.internal.InternalEceParser result = new org.xtext.ecerule.ui.contentassist.antlr.internal.InternalEceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
					put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
					put(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0(), "rule__PlusOrMinus__Alternatives_1_0");
					put(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_1_0(), "rule__MulOrDiv__OpAlternatives_1_1_0");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0(), "rule__Atomic__ValueAlternatives_2_1_0");
					put(grammarAccess.getStatementAccess().getGroup(), "rule__Statement__Group__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getEventAccess().getGroup_1(), "rule__Event__Group_1__0");
					put(grammarAccess.getEventAccess().getGroup_1_2(), "rule__Event__Group_1_2__0");
					put(grammarAccess.getContextsListAccess().getGroup(), "rule__ContextsList__Group__0");
					put(grammarAccess.getContextsListAccess().getGroup_1(), "rule__ContextsList__Group_1__0");
					put(grammarAccess.getEcContextsListAccess().getGroup(), "rule__EcContextsList__Group__0");
					put(grammarAccess.getEcContextsListAccess().getGroup_1(), "rule__EcContextsList__Group_1__0");
					put(grammarAccess.getExpContextsListAccess().getGroup(), "rule__ExpContextsList__Group__0");
					put(grammarAccess.getExpContextsListAccess().getGroup_1(), "rule__ExpContextsList__Group_1__0");
					put(grammarAccess.getEcContextAccess().getGroup(), "rule__EcContext__Group__0");
					put(grammarAccess.getEcContextAccess().getGroup_2(), "rule__EcContext__Group_2__0");
					put(grammarAccess.getFluentAccess().getGroup(), "rule__Fluent__Group__0");
					put(grammarAccess.getFluentAccess().getGroup_1(), "rule__Fluent__Group_1__0");
					put(grammarAccess.getFluentAccess().getGroup_2(), "rule__Fluent__Group_2__0");
					put(grammarAccess.getFluentAccess().getGroup_3(), "rule__Fluent__Group_3__0");
					put(grammarAccess.getConditionRuleAccess().getGroup(), "rule__ConditionRule__Group__0");
					put(grammarAccess.getToRuleAccess().getGroup(), "rule__ToRule__Group__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0(), "rule__PlusOrMinus__Group_1_0_0__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1(), "rule__PlusOrMinus__Group_1_0_1__0");
					put(grammarAccess.getMulOrDivAccess().getGroup(), "rule__MulOrDiv__Group__0");
					put(grammarAccess.getMulOrDivAccess().getGroup_1(), "rule__MulOrDiv__Group_1__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
					put(grammarAccess.getDroolsModelAccess().getStatementsAssignment(), "rule__DroolsModel__StatementsAssignment");
					put(grammarAccess.getStatementAccess().getEventAssignment_1(), "rule__Statement__EventAssignment_1");
					put(grammarAccess.getStatementAccess().getContextsListAssignment_2(), "rule__Statement__ContextsListAssignment_2");
					put(grammarAccess.getEventAccess().getEventNameAssignment_0(), "rule__Event__EventNameAssignment_0");
					put(grammarAccess.getEventAccess().getParamAssignment_1_1(), "rule__Event__ParamAssignment_1_1");
					put(grammarAccess.getEventAccess().getParamAssignment_1_2_1(), "rule__Event__ParamAssignment_1_2_1");
					put(grammarAccess.getEventFeatureAccess().getNameAssignment(), "rule__EventFeature__NameAssignment");
					put(grammarAccess.getContextsListAccess().getEcContextsListAssignment_0(), "rule__ContextsList__EcContextsListAssignment_0");
					put(grammarAccess.getContextsListAccess().getExpContextsListAssignment_1_1(), "rule__ContextsList__ExpContextsListAssignment_1_1");
					put(grammarAccess.getEcContextsListAccess().getEcContextsAssignment_0(), "rule__EcContextsList__EcContextsAssignment_0");
					put(grammarAccess.getEcContextsListAccess().getEcContextsAssignment_1_1(), "rule__EcContextsList__EcContextsAssignment_1_1");
					put(grammarAccess.getExpContextsListAccess().getExpContextsAssignment_0(), "rule__ExpContextsList__ExpContextsAssignment_0");
					put(grammarAccess.getExpContextsListAccess().getExpContextsAssignment_1_1(), "rule__ExpContextsList__ExpContextsAssignment_1_1");
					put(grammarAccess.getEcContextAccess().getFluentAssignment_1(), "rule__EcContext__FluentAssignment_1");
					put(grammarAccess.getEcContextAccess().getFluentAssignment_2_1(), "rule__EcContext__FluentAssignment_2_1");
					put(grammarAccess.getExpContextAccess().getDafareAssignment(), "rule__ExpContext__DafareAssignment");
					put(grammarAccess.getFluentAccess().getFluentNameAssignment_0(), "rule__Fluent__FluentNameAssignment_0");
					put(grammarAccess.getFluentAccess().getValuePartAssignment_1_1(), "rule__Fluent__ValuePartAssignment_1_1");
					put(grammarAccess.getFluentAccess().getTimePartAssignment_2_1(), "rule__Fluent__TimePartAssignment_2_1");
					put(grammarAccess.getFluentAccess().getCondPartAssignment_3_1(), "rule__Fluent__CondPartAssignment_3_1");
					put(grammarAccess.getConditionRuleAccess().getConditionAssignment_1(), "rule__ConditionRule__ConditionAssignment_1");
					put(grammarAccess.getToRuleAccess().getExpressionAssignment_1(), "rule__ToRule__ExpressionAssignment_1");
					put(grammarAccess.getInRuleAccess().getTimeAssignment(), "rule__InRule__TimeAssignment");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1(), "rule__PlusOrMinus__RightAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getOpAssignment_1_1(), "rule__MulOrDiv__OpAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getRightAssignment_1_2(), "rule__MulOrDiv__RightAssignment_1_2");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
					put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getAtomicAccess().getParamAssignment_3_1(), "rule__Atomic__ParamAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.xtext.ecerule.ui.contentassist.antlr.internal.InternalEceParser typedParser = (org.xtext.ecerule.ui.contentassist.antlr.internal.InternalEceParser) parser;
			typedParser.entryRuleDroolsModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public EceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(EceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
