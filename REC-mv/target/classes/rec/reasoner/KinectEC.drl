package rec.dom;

import java.util.Date;

declare Sitting extends Event
	@role(event)
end

declare Standing extends Event
	@role(event)
end

declare Crouched extends Event
	@role(event)
end

declare Walking extends Event
	@role(event)
end

declare LyingDown extends Event
	@role(event)
end

declare Fallen extends Event
	@role(event)
end

declare LongArmed extends Event
	@role(event)
end


//è seduto
declare IsSitting extends Fluent
end

query isSitting( IsSitting $f )
	$f := IsSitting()
end

query isSittingHolds()
	IsSitting( status == true )
end


//è in piedi
declare IsStanding extends Fluent
end

query isStanding( IsStanding $f )
	$f := IsStanding()
end

query isStandingHolds()
	IsStanding( status == true )
end

//caduto
declare IsFallen extends Fluent
end

query isFallen( IsFallen $f )
	$f := IsFallen()
end

query isFallenOnHolds()
	IsFallen( status == true )
end

//sta camminando
declare IsWalking extends Fluent
end

query isWalking( IsWalking $f )
	$f := IsWalking()
end

query isWalkingOnHolds()
	IsWalking( status == true )
end

//è sdraiato
declare IsLyingDown extends Fluent
end

query isLyingDown( IsLyingDown $f )
	$f := IsLyingDown()
end

query isLyingDownOnHolds()
	IsLyingDown( status == true )
end

//è a braccia alzate
declare IsLongArmed extends Fluent
end

query isLongArmed( IsLongArmed $f )
	$f := IsLongArmed()
end

query isLongArmedOnHolds()
	IsLongArmed( status == true )
end

//è accovacciato
declare IsCrouched extends Fluent
end

query isCrouched( IsCrouched $f )
	$f := IsCrouched()
end

query isCrouchedOnHolds()
	IsCrouched( status == true )
end

//sta salutando
declare SaysHello extends Fluent
end

query saysHello( SaysHello $f )
	$f := SaysHello()
end

query saysHelloOnHolds()
	SaysHello( status == true )
end

//sta dormendo?
declare IsSleeping extends Fluent
end

query isSleeping( IsSleeping $f )
	$f := IsSleeping()
end

query isSleepingOnHolds()
	IsSleeping( status == true )
end

//si sente male?
declare FeelsSick extends Fluent
end

query feelsSick( FeelsSick $f )
	$f := FeelsSick()
end

query feelsSickOnHolds()
	FeelsSick( status == true )
end

//è critico?
declare IsCritical extends Fluent
end

query isCritical( IsCritical $f )
	$f := IsCritical()
end

query isCriticalOnHolds()
	IsCritical( status == true )
end

//è morto?
declare IsDead extends Fluent
end

query isDead( IsDead $f )
	$f := IsDead()
end

query isDeadOnHolds()
	IsDead( status == true )
end


rule "Initialisation"
	when
		$i: Initially()
	then
		#System.out.println("Initialisation");
		Fluent f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12;
	
		// insert(init);
		
		insert(f1 = new IsSitting($i, false));
		insert(f2 = new IsStanding($i, false));
		insert(f3 = new IsFallen($i, false));
		insert(f6 = new IsWalking($i, false));
		insert(f7 = new IsLyingDown($i, false));
		insert(f8 = new IsLongArmed($i, false));
		insert(f9 = new IsCrouched($i, false));
		insert(f4 = new IsDead($i, false));
		insert(f5 = new IsCritical($i, false));
		insert(f10 = new IsSleeping($i, false));
		insert(f11 = new SaysHello($i, false));
		insert(f12 = new FeelsSick($i, false));
		
		// insert(new Clip($i.getStart(), $i, f1)); 
		// insert(new Declip($i.getStart(), $i, f2)); 
		// insert(new Clip($i.getStart(), $i, f3));		
end

rule "Standing --> declip(IsStanding)"
	when
		$e: Standing( $s: start )
		?isStanding( $f; )
	then
		//System.out.println("Standing --> declip(IsStanding)");
		insert(new Declip($s, $e, $f));
end

rule "Standing --> clip(IsSitting)"
	when
		$e: Standing( $s: start )
		?isSitting( $f; )
	then
		//System.out.println("Standing --> clip(IsSitting)");
		insert(new Clip($s, $e, $f));
end

rule "Standing --> clip(IsFallen)"
	when
		$e: Standing( $s: start )
		?isFallen( $f; )
	then
		//System.out.println("Standing --> clip(IsFallen)");
		insert(new Clip($s, $e, $f));
end

rule "Standing --> clip(IsWalking)"
	when
		$e: Standing( $s: start )
		?isWalking( $f; )
	then
		//System.out.println("Standing --> clip(IsWalking)");
		insert(new Clip($s, $e, $f));
end

rule "Standing --> clip(IsLyingDown)"
	when
		$e: Standing( $s: start )
		?isLyingDown( $f; )
	then
		//System.out.println("Standing --> clip(IsLyingDown)");
		insert(new Clip($s, $e, $f));
end


rule "Standing --> clip(IsLongArmed)"
	when
		$e: Standing( $s: start )
		?isLongArmed( $f; )
	then
		//System.out.println("Standing --> clip(IsLongArmed)");
		insert(new Clip($s, $e, $f));
end

rule "Standing --> clip(IsCrouched)"
	when
		$e: Standing( $s: start )
		?isCrouched( $f; )
	then
		//System.out.println("Standing --> clip(IsCrouched)");
		insert(new Clip($s, $e, $f));
end

rule "Standing --> clip(IsDead)"
	when
		$e: Standing( $s: start )
		?isDead( $f; )
	then
		//System.out.println("Standing --> clip(IsDead)");
		insert(new Clip($s, $e, $f));
end

rule "Standing --> clip(IsCritical)"
	when
		$e: Standing( $s: start )
		?isCritical( $f; )
	then
		//System.out.println("Standing --> clip(IsCritical)");
		insert(new Clip($s, $e, $f));
end

rule "Standing --> clip(IsSleeping)"
	when
		$e: Standing( $s: start )
		?isSleeping( $f; )
	then
		//System.out.println("Standing --> clip(IsSleeping)");
		insert(new Clip($s, $e, $f));
end
/*
rule "Standing --> clip(SaysHello)"
	when
		$e: Standing( $s: start )
		?saysHello( $f; )
	then
		//System.out.println("Standing --> clip(SaysHello)");
		insert(new Clip($s, $e, $f));
end

rule "Standing --> clip(FeelsSick)"
	when
		$e: Standing( $s: start )
		?feelsSick( $f; )
	then
		//System.out.println("Standing --> clip(FeelsSick)");
		insert(new Clip($s, $e, $f));
end
*/

rule "Sitting --> declip(IsSitting)"
	when
		$e: Sitting( $s: start )
		?isSitting( $f; )
	then
		//System.out.println("Sitting --> declip(IsSitting)");
		insert(new Declip($s, $e, $f));
end

rule "Sitting --> clip(IsStanding)"
	when
		$e: Sitting( $s: start )
		?isStanding( $f; )
	then
		//System.out.println("Sitting --> clip(IsStanding)");
		insert(new Clip($s, $e, $f));
end


rule "Sitting --> clip(IsFallen)"
	when
		$e: Sitting( $s: start )
		?isFallen( $f; )
	then
		//System.out.println("Sitting --> clip(IsFallen)");
		insert(new Clip($s, $e, $f));
end

rule "Sitting --> clip(IsWalking)"
	when
		$e: Sitting( $s: start )
		?isWalking( $f; )
	then
		//System.out.println("Sitting --> clip(IsWalking)");
		insert(new Clip($s, $e, $f));
end

rule "Sitting --> clip(IsLyingDown)"
	when
		$e: Sitting( $s: start )
		?isLyingDown( $f; )
	then
		//System.out.println("Sitting --> clip(IsLyingDown)");
		insert(new Clip($s, $e, $f));
end


rule "Sitting --> clip(IsLongArmed)"
	when
		$e: Sitting( $s: start )
		?isLongArmed( $f; )
		
		IsLongArmed( status == true )
	then
		//System.out.println("Sitting --> clip(IsLongArmed)");
		insert(new Clip($s, $e, $f));
end


rule "Sitting --> clip(IsCrouched)"
	when
		$e: Sitting( $s: start )
		?isCrouched( $f; )
	then
		//System.out.println("Sitting --> clip(IsCrouched)");
		insert(new Clip($s, $e, $f));
end

rule "Sitting --> clip(IsDead)"
	when
		$e: Sitting( $s: start )
		?isDead( $f; )
	then
		//System.out.println("Sitting --> clip(IsDead)");
		insert(new Clip($s, $e, $f));
end

rule "Sitting --> clip(IsCritical)"
	when
		$e: Sitting( $s: start )
		?isCritical( $f; )
	then
		//System.out.println("Sitting --> clip(IsCritical)");
		insert(new Clip($s, $e, $f));
end

rule "Sitting --> clip(IsSleeping)"
	when
		$e: Sitting( $s: start )
		?isSleeping( $f; )
	then
		//System.out.println("Sitting --> clip(IsSleeping)");
		insert(new Clip($s, $e, $f));
end

/*
rule "Sitting --> clip(SaysHello)"
	when
		$e: Sitting( $s: start )
		?saysHello( $f; )
	then
		//System.out.println("Sitting --> clip(SaysHello)");
		insert(new Clip($s, $e, $f));
end


rule "Sitting --> clip(FeelsSick)"
	when
		$e: Sitting( $s: start )
		?feelsSick( $f; )
	then
		//System.out.println("Sitting --> clip(FeelsSick)");
		insert(new Clip($s, $e, $f));
end
*/

rule "Fallen --> declip(IsFallen)"
	when
		$e: Fallen( $s: start )
		?isFallen( $f; )
	then
		//System.out.println("Fallen --> declip(IsFallen)");
		insert(new Declip($s, $e, $f));
end

rule "Fallen --> clip(IsSitting)"
	when
		$e: Fallen( $s: start )
		?isSitting( $f; )
	then
		//System.out.println("Fallen --> clip(IsSitting)");
		insert(new Clip($s, $e, $f));
end

rule "Fallen --> clip(IsStanding)"
	when
		$e: Fallen( $s: start )
		?isStanding( $f; )
	then
		//System.out.println("Fallen --> clip(IsStanding)");
		insert(new Clip($s, $e, $f));
end

rule "Fallen --> clip(IsWalking)"
	when
		$e: Fallen( $s: start )
		?isWalking( $f; )
	then
		//System.out.println("Fallen --> clip(IsWalking)");
		insert(new Clip($s, $e, $f));
end

rule "Fallen --> clip(IsLyingDown)"
	when
		$e: Fallen( $s: start )
		?isLyingDown( $f; )
	then
		//System.out.println("Fallen --> clip(IsWLyingDown)");
		insert(new Clip($s, $e, $f));
end

rule "Fallen --> clip(IsLongArmed)"
	when
		$e: Fallen( $s: start )
		?isLongArmed( $f; )
	then
		//System.out.println("Fallen --> clip(IsLongArmed)");
		insert(new Clip($s, $e, $f));
end

rule "Fallen --> clip(IsCrouched)"
	when
		$e: Fallen( $s: start )
		?isCrouched( $f; )
	then
		//System.out.println("Fallen --> clip(IsCrouched)");
		insert(new Clip($s, $e, $f));
end

rule "Fallen --> clip(SaysHello)"
	when
		$e: Fallen( $s: start )
		?saysHello( $f; )
	then
		//System.out.println("Fallen --> clip(SaysHello)");
		insert(new Clip($s, $e, $f));
end


rule "Fallen --> clip(IsSleeping)"
	when
		$e: Fallen( $s: start )
		?isSleeping( $f; )
	then
		//System.out.println("Fallen --> clip(IsSleeping)");
		insert(new Clip($s, $e, $f));
end

rule "Crouched --> declip(IsCrouched)"
	when
		$e: Crouched( $s: start )
		?isCrouched( $f; )
	then
		//System.out.println("Crouched --> declip(IsCrouched)");
		insert(new Declip($s, $e, $f));
end

rule "Crouched --> clip(IsStanding)"
	when
		$e: Crouched( $s: start )
		?isStanding( $f; )
	then
		//System.out.println("Crouched --> clip(IsStanding)");
		insert(new Clip($s, $e, $f));
end

rule "Crouched --> clip(IsSitting)"
	when
		$e: Crouched( $s: start )
		?isSitting( $f; )
	then
		//System.out.println("Crouched --> clip(IsSitting)");
		insert(new Clip($s, $e, $f));
end

rule "Crouched --> clip(IsFallen)"
	when
		$e: Crouched( $s: start )
		?isFallen( $f; )
	then
		//System.out.println("Crouched --> clip(IsFallen)");
		insert(new Clip($s, $e, $f));
end

rule "Crouched --> clip(IsWalking)"
	when
		$e: Crouched( $s: start )
		?isWalking( $f; )
	then
		//System.out.println("Crouched --> clip(IsWalking)");
		insert(new Clip($s, $e, $f));
end

rule "Crouched --> clip(IsLyingDown)"
	when
		$e: Crouched( $s: start )
		?isLyingDown( $f; )
	then
		//System.out.println("Crouched --> clip(IsLyingDown)");
		insert(new Clip($s, $e, $f));
end


rule "Crouched --> clip(IsLongArmed)"
	when
		$e: Crouched( $s: start )
		?isLongArmed( $f; )
	then
		//System.out.println("Crouched --> clip(IsLongArmed)");
		insert(new Clip($s, $e, $f));
end

/*
rule "Crouched --> clip(SaysHello)"
	when
		$e: Crouched( $s: start )
		?saysHello( $f; )
	then
		//System.out.println("Crouched --> clip(SaysHello)");
		insert(new Clip($s, $e, $f));
end
*/

rule "Crouched --> clip(IsSleeping)"
	when
		$e: Crouched( $s: start )
		?isSleeping( $f; )
	then
		//System.out.println("Crouched --> clip(IsSleeping)");
		insert(new Clip($s, $e, $f));
end

rule "LyingDown --> declip(IsLyingDown)"
	when
		$e: LyingDown( $s: start )
		?isLyingDown( $f; )
	then
		//System.out.println("LyingDown --> declip(IsLyingDown)");
		insert(new Declip($s, $e, $f));
end

rule "LyingDown --> clip(IsSitting)"
	when
		$e: LyingDown( $s: start )
		?isSitting( $f; )
	then
		//System.out.println("LyingDown --> clip(IsSitting)");
		insert(new Clip($s, $e, $f));
end

rule "LyingDown --> clip(IsStanding)"
	when
		$e: LyingDown( $s: start )
		?isStanding( $f; )
	then
		//System.out.println("LyingDown --> clip(IsStanding)");
		insert(new Clip($s, $e, $f));
end


rule "LyingDown --> clip(IsFallen)"
	when
		$e: LyingDown( $s: start )
		?isFallen( $f; )
	then
		//System.out.println("LyingDown --> clip(IsFallen)");
		insert(new Clip($s, $e, $f));
end

rule "LyingDown --> clip(IsWalking)"
	when
		$e: LyingDown( $s: start )
		?isWalking( $f; )
	then
		//System.out.println("LyingDown --> clip(IsWalking)");
		insert(new Clip($s, $e, $f));
end

rule "LyingDown --> clip(IsLongArmed)"
	when
		$e: LyingDown( $s: start )
		?isLongArmed( $f; )
	then
		//System.out.println("LyingDown --> clip(IsLongArmed)");
		insert(new Clip($s, $e, $f));
end

rule "LyingDown --> clip(IsCrouched)"
	when
		$e: LyingDown( $s: start )
		?isCrouched( $f; )
	then
		//System.out.println("LyingDown --> clip(IsCrouched)");
		insert(new Clip($s, $e, $f));
end

rule "LyingDown --> clip(SaysHello)"
	when
		$e: LyingDown( $s: start )
		?saysHello( $f; )
	then
		//System.out.println("LyingDown --> clip(SaysHello)");
		insert(new Clip($s, $e, $f));
end

rule "Walking --> declip(IsWalking)"
	when
		$e: Walking( $s: start )
		?isWalking( $f; )
	then
		//System.out.println("Walking --> declip(IsWalking)");
		insert(new Declip($s, $e, $f));
end

rule "Walking --> clip(IsStanding)"
	when
		$e: Walking( $s: start )
		?isStanding( $f; )
	then
		//System.out.println("Walking --> clip(IsStanding)");
		insert(new Clip($s, $e, $f));
end

rule "Walking --> clip(IsSitting)"
	when
		$e: Walking( $s: start )
		?isSitting( $f; )
	then
		//System.out.println("Walking --> clip(IsSitting)");
		insert(new Clip($s, $e, $f));
end

rule "Walking --> clip(IsFallen)"
	when
		$e: Walking( $s: start )
		?isFallen( $f; )
	then
		//System.out.println("Walking --> clip(IsFallen)");
		insert(new Clip($s, $e, $f));
end

rule "Walking --> clip(IsLyingDown)"
	when
		$e: Walking( $s: start )
		?isLyingDown( $f; )
	then
		//System.out.println("Walking --> clip(IsLyingDown)");
		insert(new Clip($s, $e, $f));
end


rule "Walking --> clip(IsLongArmed)"
	when
		$e: Walking( $s: start )
		?isLongArmed( $f; )
	then
		//System.out.println("Walking --> clip(IsLongArmed)");
		insert(new Clip($s, $e, $f));
end

rule "Walking --> clip(IsCrouched)"
	when
		$e: Walking( $s: start )
		?isCrouched( $f; )
	then
		//System.out.println("Walking --> clip(IsCrouched)");
		insert(new Clip($s, $e, $f));
end

rule "Walking --> clip(IsDead)"
	when
		$e: Walking( $s: start )
		?isDead( $f; )
	then
		//System.out.println("Walking --> clip(IsDead)");
		insert(new Clip($s, $e, $f));
end

rule "Walking --> clip(IsCritical)"
	when
		$e: Walking( $s: start )
		?isCritical( $f; )
	then
		//System.out.println("Walking --> clip(IsCritical)");
		insert(new Clip($s, $e, $f));
end

/*
rule "Walking --> clip(SaysHello)"
	when
		$e: Walking( $s: start )
		?saysHello( $f; )
	then
		//System.out.println("Walking --> clip(SaysHello)");
		insert(new Clip($s, $e, $f));
end

rule "Walking --> clip(FeelsSick)"
	when
		$e: Walking( $s: start )
		?feelsSick( $f; )
	then
		//System.out.println("Walking --> clip(FeelsSick)");
		insert(new Clip($s, $e, $f));
end
*/

rule "Walking --> clip(IsSleeping)"
	when
		$e: Walking( $s: start )
		?isSleeping( $f; )
	then
		//System.out.println("Walking --> clip(IsSleeping)");
		insert(new Clip($s, $e, $f));
end

rule "LongArmed --> declip(IsLongArmed)"
	when
		$e: LongArmed( $s: start )
		?isLongArmed( $f; )
	then
		//System.out.println("LongArmed --> declip(IsLongArmed)");
		insert(new Declip($s, $e, $f));
end
/*
rule "LongArmed --> clip(IsSitting)"
	when
		$e: LongArmed( $s: start )
		?isSitting( $f; )
	then
		//System.out.println("LongArmed --> clip(IsSitting)");
		insert(new Clip($s, $e, $f));
end

rule "LongArmed --> clip(IsStanding)"
	when
		$e: LongArmed( $s: start )
		?isStanding( $f; )
	then
		//System.out.println("LongArmed --> clip(IsStanding)");
		insert(new Clip($s, $e, $f));
end
*/

rule "LongArmed --> clip(IsFallen)"
	when
		$e: LongArmed( $s: start )
		?isFallen( $f; )
	then
		//System.out.println("LongArmed --> clip(IsFallen)");
		insert(new Clip($s, $e, $f));
end

/*
rule "LongArmed --> clip(IsWalking)"
	when
		$e: LongArmed( $s: start )
		?isWalking( $f; )
	then
		//System.out.println("LongArmed --> clip(IsWalking)");
		insert(new Clip($s, $e, $f));
end

rule "LongArmed --> clip(IsCrouched)"
	when
		$e: LongArmed( $s: start )
		?isCrouched( $f; )
	then
		//System.out.println("LongArmed --> clip(IsCrouched)");
		insert(new Clip($s, $e, $f));
end
*/
rule "LongArmed --> clip(IsSleeping)"
	when
		$e: LongArmed( $s: start )
		?isSleeping( $f; )
	then
		//System.out.println("LongArmed --> clip(IsSleeping)");
		insert(new Clip($s, $e, $f));
end

rule "LongArmed --> clip(IsCritical)"
	when
		$e: LongArmed( $s: start )
		?isCritical( $f; )
		?feelsSick( $fs; )
		
		IsCritical( status == true )
	then
		//System.out.println("LongArmed --> clip(IsCritical)");
		insert(new Clip($s, $e, $f));
		insert(new Declip($s, $e, $fs));
end

/*
rule "prova1"
	when
		$e: Event($t: start)
		?isCritical( $f; )
		FeelsSick( status == true, $ee: event )
		
	then
		System.out.println("Test: " + $e + "\n\t" + $t + "\n\t" + $f + "\n\t" + $ee);
end


rule "prova2"
	when
		$e: Event($t: start)
		?isCritical( $f; )
		IsCrouched( status == true, $ee: event )
		//Event( this == $ee, this before[100ms] $e )	
		//eval(($e.getStart() - $ee.getStart()) >= 3000)
	then
		System.out.println("prova2: " + $e + "\n\t" + $ee + "\n\t" + ($e.getStart() - $ee.getStart()));
end


rule "prova3"
	when
		$e: Event($t: start)
		?isDead( $f; )
		IsFallen( status == true, $ee: event )
		Event( this == $ee, this after[100ms] $e )	
	then
		System.out.println("After: " + $e + "\n\t" + $ee + "\n\t" + ($e.getStart() - $ee.getStart()));
end

rule "prova4"
	when
		$e: Event($t: start)
		?isDead( $f; )
		IsFallen( status == true, $ee: event )
		eval(($e.getStart() - $ee.getStart()) >= 100)
	then
		System.out.println("Bribing: " + $e + "\n\t" + $ee + "\n\t" + ($e.getStart() - $ee.getStart()));
end
*/
/*
rule "prova 5"
	when
		$c: Clip( $ec: event, $fc: fluent, $tc: start )
		Sitting( this == $ec, this.getStart() == $tc)
		IsLongArmed( this == $fc )
	then
		System.out.println("Clip: " + "e= " + $ec + "\tf= " + $fc + "\tt= " + $tc);
end
*/

		
rule "Person don't says hello more because now he's only sitting"
	when
		$e: Sitting($t: start)
		
		?saysHello( $f; )
		
		SaysHello( status == true )
		IsSitting( status == true)
		IsLongArmed( status == false, $ee: event )
		
		eval(($e.getStart() - $ee.getStart()) >= 5000)
	then
		insert(new Clip($t, $e, $f));
end

rule "Person don't says hello more because now he's only standing"
	when
		$e: Standing($t: start)
		
		?saysHello( $f; )
		
		SaysHello( status == true )
		IsStanding( status == true)
		IsLongArmed( status == false, $ee: event )
		
		eval(($e.getStart() - $ee.getStart()) >= 3000)
	then
		insert(new Clip($t, $e, $f));
end

rule "Person don't says hello more because now he's only walking"
	when
		$e: Walking($t: start)
		
		?saysHello( $f; )
		
		SaysHello( status == true )
		IsWalking( status == true)
		IsLongArmed( status == false, $ee: event )
		
		eval(($e.getStart() - $ee.getStart()) >= 3000)
	then
		insert(new Clip($t, $e, $f));
end

rule "Person says hello"
	when
		$e: LongArmed($t: start)
		
		?saysHello( $f; )
		
		IsLongArmed( status == true , $ee: event)
		FeelsSick( status == false )
		IsCritical( status == false )
		
		eval(($e.getStart() - $ee.getStart()) >= 5000 && ($e.getStart() - $ee.getStart()) <= 10000)
	then
		insert(new Declip($t, $e, $f));
end

rule "Person asks for help"
	when
		$e: LongArmed($t: start)
		
		?feelsSick( $f; )
		?saysHello( $fs; )
		
		IsLongArmed( status == true , $ee: event)
		//IsCrouched( status == true )
		
		eval(($e.getStart() - $ee.getStart()) >= 10000)
	then
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fs));
end

rule "Person is sleeping?"
	when
		$e: LyingDown($t: start)
		
		?isSleeping( $f; )
		
		IsLyingDown( status == true , $ee: event)
		IsDead( status == false )
		IsCritical( status == false )
		FeelsSick( status == false )
		
		eval(($e.getStart() - $ee.getStart()) >= 5000)
	then
		insert(new Declip($t, $e, $f));
end

rule "Person feels sick for too much time IsCrouched"
	when
		$e: Crouched($t: start)
		
		?feelsSick( $f; )
		?saysHello( $fs; )
		
		IsCrouched( status == true , $ee: event)
		IsDead( status == false )
		IsCritical( status == false )
		
		eval(($e.getStart() - $ee.getStart()) >= 5000 && ($e.getStart() - $ee.getStart()) < 10000)
	then
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fs));
end

rule "Person is critical for too much time IsCrouched case A"
	when
		$e: Crouched($t: start)
		
		?isCritical( $f; )
		?feelsSick( $fs; )
		
		IsCrouched( status == true, $ef: event )
		FeelsSick( status == true, $ee: event )
		IsDead( status == false )
		
		eval($ef.getStart() < $ee.getStart())
		eval(($e.getStart() - $ee.getStart()) >= 10000)
	then
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fs));
end

rule "Person is critical for too much time IsCrouched case B"
	when
		$e: Crouched($t: start)
		
		?isCritical( $f; )
		?feelsSick( $fs; )
		
		IsCrouched( status == true, $ef: event )
		FeelsSick( status == true, $ee: event )
		IsDead( status == false )
		
		eval($ee.getStart() < $ef.getStart())
		eval(($e.getStart() - $ef.getStart()) >= 10000)
	then
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fs));
end

rule "Person feels sick for too much time IsFallen"
	when
		$e: Fallen($t: start)
		
		?feelsSick( $f; )
		
		IsFallen( status == true , $ee: event)
		IsDead( status == false )
		IsCritical( status == false )
		
		eval(($e.getStart() - $ee.getStart()) >= 5000 && ($e.getStart() - $ee.getStart()) < 10000)
	then
		insert(new Declip($t, $e, $f));
end

//case A: caso in cui il fluente FeelsSick non è stato scatenato dall'evento Fallen (ma ad esempio dall'evento Crouched)
rule "Person is critical for too much time IsFallen case A"
	when
		$e: Fallen($t: start)
		?isCritical( $f; )
		?feelsSick( $fs; )

		IsFallen( status == true, $ef: event )
		FeelsSick( status == true, $ee: event )
		IsDead( status == false )
		
		eval($ef.getStart() < $ee.getStart())
		eval(($e.getStart() - $ee.getStart()) >= 10000)
	then
		//System.out.println("At least 3000ms Fallen --> critical??");			
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fs));
end

//case B: caso in cui il fluente FeelsSick è stato scatenato dall'evento Fallen
rule "Person is critical for too much time IsFallen case B"
	when
		$e: Fallen($t: start)
		?isCritical( $f; )
		?feelsSick( $fs; )

		IsFallen( status == true, $ef: event )
		FeelsSick( status == true, $ee: event )
		IsDead( status == false )
		
		eval($ee.getStart() < $ef.getStart())
		eval(($e.getStart() - $ef.getStart()) >= 10000)
	then
		//System.out.println("At least 3000ms Fallen --> critical??");			
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fs));
end

rule "Person feels sick if before IsCritical and then isStanding"
	when
		$e: Standing($t: start)
		?isCritical( $fc; )
		?feelsSick( $fs; )
		
		IsCritical( status == true)

	then
		insert(new Declip($t, $e, $fs));
		insert(new Clip($t, $e, $fc));
end

rule "Person feels well if before feelsSick and then isStanding"
	when
		$e: Standing($t: start)
		?feelsSick( $fs; )
		
		FeelsSick( status == true, $ee: event)
		IsStanding( status == true)
		
		eval(($e.getStart() - $ee.getStart()) >= 3000)
	then
		insert(new Clip($t, $e, $fs));
end

rule "Person feels sick if before IsCritical and then isSitting"
	when
		$e: Sitting($t: start)
		?isCritical( $fc; )
		?feelsSick( $fs; )
		
		IsCritical( status == true)
		
	then
		insert(new Declip($t, $e, $fs));
		insert(new Clip($t, $e, $fc));
end

rule "Person feels well if before feelsSick and then isSitting"
	when
		$e: Sitting($t: start)
		?feelsSick( $fs; )
		
		FeelsSick( status == true, $ee: event)
		IsSitting( status == true)
		
		eval(($e.getStart() - $ee.getStart()) >= 3000)
	then
		insert(new Clip($t, $e, $fs));
end

rule "Person feels sick if before IsCritical and then isWalking"
	when
		$e: Walking($t: start)
		?isCritical( $fc; )
		?feelsSick( $fs; )
		
		IsCritical( status == true)
		
	then
		insert(new Declip($t, $e, $fs));
		insert(new Clip($t, $e, $fc));
end

rule "Person feels well if before feelsSick and then isWalking"
	when
		$e: Walking($t: start)
		?feelsSick( $fs; )
		
		FeelsSick( status == true, $ee: event)
		IsWalking( status == true)
		
		eval(($e.getStart() - $ee.getStart()) >= 3000)
	then
		insert(new Clip($t, $e, $fs));
end

rule "Person is dead for too much time IsFallen case A"
	when
		$e: Fallen($t: start)
		?isDead( $f; )
		?isCritical( $fc; )
		
		IsFallen( status == true, $ef: event )
		IsCritical( status == true, $ee: event )
		
		eval($ef.getStart() < $ee.getStart())
		eval(($e.getStart() - $ee.getStart()) >= 10000)
	then
		//System.out.println("At least 10000ms Fallen --> dead??");
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fc));
end

rule "Person is dead for too much time IsFallen case B"
	when
		$e: Fallen($t: start)
		?isDead( $f; )
		?isCritical( $fc; )
		
		IsFallen( status == true, $ef: event )
		IsCritical( status == true, $ee: event )
		
		eval($ee.getStart() < $ef.getStart())
		eval(($e.getStart() - $ef.getStart()) >= 10000)
	then
		//System.out.println("At least 10000ms Fallen --> dead??");
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fc));
end

rule "Person is dead for too too too much time IsCrouched case A"
	when
		$e: Crouched($t: start)
		?isDead( $f; )
		?isCritical( $fc; )
		
		IsCritical( status == true, $ef: event )
		IsCrouched( status == true, $ee: event )
		// Event( this == $ee, this before[100ms] $e )
		eval($ee.getStart() < $ef.getStart())
		eval(($e.getStart() - $ef.getStart()) >= 100000)
	then
		//System.out.println("At least 10000ms Fallen --> dead??");
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fc));
end

rule "Person is dead for too too too much time IsCrouched case B"
	when
		$e: Crouched($t: start)
		?isDead( $f; )
		?isCritical( $fc; )
		
		IsCritical( status == true, $ef: event )
		IsCrouched( status == true, $ee: event )
		// Event( this == $ee, this before[100ms] $e )
		eval($ef.getStart() < $ee.getStart())
		eval(($e.getStart() - $ee.getStart()) >= 100000)
	then
		//System.out.println("At least 10000ms Fallen --> dead??");
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fc));
end

//se arriva un Crouched dopo che la persona è stata considerata morta allora vuol dire che in realtà è critica: forse
//ha avuto qualche altro spasmo di vita e si è rannicchiata!
rule "Person is critical if IsCrouched after IsDead"
	when
		$e: Crouched($t: start)
		
		?isCritical( $f; )
		?isDead( $fd; )
		
		IsCrouched( status == true , $ee: event)
		IsDead( status == true )
		
	then
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fd));
end

rule "Person is dead for too too too much time IsSleeping"
	when
		$e: LyingDown($t: start)
		?isDead( $f; )
		?isSleeping( $fs; )
		
		IsSleeping( status == true, $ee: event )
		// Event( this == $ee, this before[100ms] $e )
		eval(($e.getStart() - $ee.getStart()) >= 100000) //aumentare di molto questo valore!!!
	then
		//System.out.println("At least 10000ms Fallen --> dead??");
		insert(new Declip($t, $e, $f));
		insert(new Clip($t, $e, $fs));
end