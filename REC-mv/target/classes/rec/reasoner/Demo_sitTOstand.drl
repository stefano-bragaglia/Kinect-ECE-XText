package rec.dom;

import java.util.Date;

declare Sitting extends Event
	@role(event)
end

declare Standing extends Event
	@role(event)
end

//è seduto
declare IsSitting extends Fluent
@propertyReactive
end


//è in piedi
declare IsStanding extends Fluent
@propertyReactive
end


//repetition
declare Repetition extends Fluent
@propertyReactive
end


//initially
rule "Initialisation"
	when
		$i: Initially()
	then
		// System.out.println("Initialisation");
		MVI m1, m2, m3;
		Fluent f1, f2, f3;
		Sample s1, s2, s3;
	
		// insert(init);
		
		insert(f1 = new IsSitting());
		insert(f2 = new IsStanding());
		insert(f3 = new Repetition());
		
		insert(m1 = new MVI(f1, (double) 0.0, (long) 0, (long) Long.MAX_VALUE));
		insert(m2 = new MVI(f2, (double) 0.0, (long) 0, (long) Long.MAX_VALUE));
		insert(m3 = new MVI(f3, (double) 0.0, (long) 0, (long) Long.MAX_VALUE));
end

rule "Sitting --> Sample(IsSitting)"
	when
		$e: Sitting( $s: start, $v: value )
		$f: IsSitting()
	then
//		System.out.println("**********insert Sample Sitting value: " + $v + ", start: " + $s);
		insert(new Sample($e, $f, $v, $s));
end

rule "Sitting --> Declip(IsStanding)"
	when
		$e: Sitting( $s: start )
		$f: IsStanding()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent==$f, time==$s, value==0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

rule "Standing --> Sample(IsStanding)"
	when
		$e: Standing( $s: start, $v: value )
		$f: IsStanding()
	then
//		System.out.println("************insert Sample Standing value: " + $v + ", start: " + $s);
		insert(new Sample($e, $f, $v, $s));
end

rule "Standing --> Declip(IsSitting)"
	when
		$e: Standing( $s: start )
		$f: IsSitting()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent == $f, time>$t, time<=$s, value == 0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

rule "Have a repetition"
no-loop true
salience -1
	when
		$e: Standing( $t1: start, $v1: value > 0 )
		
		$f: IsSitting()
		$ss: Sample( fluent==$f, $t2: time<$t1, $v2: value > 0 )
		not Sample( time < $t1 && > $t2, value > 0 )
		
		$ff: Repetition()
	then
		System.out.println("Have a repetition!");
		
		Double avarage = ($v1+$v2)/2;
		
		insert(new Sample(null, $ff, avarage, $t1));
end

rule "Go for new Repetition"
no-loop true
salience -1
	when
		$e: Sitting( $t1: start, $v: value > 0 )
		
		$f: IsStanding()
		$ss: Sample( fluent==$f, $t2: time<$t1, value > 0 )
		not Sample( time < $t1 && > $t2, value > 0 )
		
		$ff: Repetition()
	then
		System.out.println("Go for new repetition!");
		
		insert(new Sample(null, $ff, (double) 0.0, $t1));
end