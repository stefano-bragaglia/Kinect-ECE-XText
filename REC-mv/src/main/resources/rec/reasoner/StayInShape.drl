package rec.dom;

global java.lang.Integer wait;

import java.util.Date;

declare FirstPose extends Event
	@role(event)
end

declare SecondPose extends Event
	@role(event)
end

declare ThirdPose extends Event
	@role(event)
end

declare LastPose extends Event
	@role(event)
end

//Reset
declare Reset extends Event
	@role(event)
end

//DeclipAlert
declare DeclipAlert extends Event
	@role(event)
end

//prima posa eseguita
declare IsAtFirst extends Fluent
@propertyReactive
end


//seconda posa eseguita
declare IsAtSecond extends Fluent
@propertyReactive
end

//terza posa eseguita
declare IsAtThird extends Fluent
@propertyReactive
end

//ultima posa eseguita
declare IsAtLast extends Fluent
@propertyReactive
end

//first intermediate of repetition
declare FirstIntermediate extends Fluent
@propertyReactive
end

//second intermediate of repetition
declare SecondIntermediate extends Fluent
@propertyReactive
end

//repetition
declare Repetition extends Fluent
@propertyReactive
end

//HurryUp
declare HurryUp extends Fluent
@propertyReactive
end

//initially
rule "Initialisation"
	when
		$i: Initially()
	then
		// System.out.println("Initialisation");
		MVI m1, m2, m3, m4, m5, m6, m7, m8;
		Fluent f1, f2, f3, f4, f5, f6, f7, f8;
	
		// insert(init);
		
		insert(f1 = new IsAtFirst());
		insert(f2 = new IsAtSecond());
		insert(f3 = new IsAtThird());
		insert(f4 = new IsAtLast());
		insert(f5 = new FirstIntermediate());
		insert(f6 = new SecondIntermediate());
		insert(f7 = new Repetition());
		insert(f8 = new HurryUp());
		
		insert(m1 = new MVI(f1, (double) 0.0, (long) 0, (long) Long.MAX_VALUE));
		insert(m2 = new MVI(f2, (double) 0.0, (long) 0, (long) Long.MAX_VALUE));
		insert(m3 = new MVI(f3, (double) 0.0, (long) 0, (long) Long.MAX_VALUE));
		insert(m4 = new MVI(f4, (double) 0.0, (long) 0, (long) Long.MAX_VALUE));
		insert(m5 = new MVI(f5, (double) 0.0, (long) 0, (long) Long.MAX_VALUE));
		insert(m6 = new MVI(f6, (double) 0.0, (long) 0, (long) Long.MAX_VALUE));
		insert(m7 = new MVI(f7, (double) 0.0, (long) 0, (long) Long.MAX_VALUE));
		insert(m8 = new MVI(f8, (double) 0.0, (long) 0, (long) Long.MAX_VALUE));
end

rule "FirstPose --> Sample(IsAtFirst)"
	when
		$e: FirstPose( $s: start, $v: value )
		$f: IsAtFirst()
	then
//		System.out.println("**********insert Sample IsAtFirst value: " + $v + ", start: " + $s);
		insert(new Sample($e, $f, $v, $s));
end

rule "FirstPose --> Clip(IsAtSecond)"
	when
		$e: FirstPose( $s: start )
		$f: IsAtSecond()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent==$f, time==$s, value==0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

rule "FirstPose --> Clip(IsAtThird)"
	when
		$e: FirstPose( $s: start )
		$f: IsAtThird()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent==$f, time==$s, value==0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

rule "FirstPose --> Clip(IsAtLast)"
	when
		$e: FirstPose( $s: start )
		$f: IsAtLast()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent==$f, time==$s, value==0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

//Second Pose ************************************************************************************************
rule "SecondPose --> Sample(IsAtSecond)"
	when
		$e: SecondPose( $s: start, $v: value )
		$f: IsAtSecond()
	then
//		System.out.println("************insert Sample IsAtSecond value: " + $v + ", start: " + $s);
		insert(new Sample($e, $f, $v, $s));
end

rule "SecondPose --> Clip(IsAtFirst)"
	when
		$e: SecondPose( $s: start )
		$f: IsAtFirst()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent == $f, time>$t, time<=$s, value == 0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

rule "SecondPose --> Clip(IsAtThird)"
	when
		$e: SecondPose( $s: start )
		$f: IsAtThird()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent == $f, time>$t, time<=$s, value == 0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

rule "SecondPose --> Clip(IsAtLast)"
	when
		$e: SecondPose( $s: start )
		$f: IsAtLast()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent == $f, time>$t, time<=$s, value == 0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

//Third Pose ************************************************************************************************
rule "ThirdPose --> Sample(IsAtThird)"
	when
		$e: ThirdPose( $s: start, $v: value )
		$f: IsAtThird()
	then
//		System.out.println("************insert Sample IsAtThird value: " + $v + ", start: " + $s);
		insert(new Sample($e, $f, $v, $s));
end

rule "ThirdPose --> Clip(IsAtFirst)"
	when
		$e: ThirdPose( $s: start )
		$f: IsAtFirst()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent == $f, time>$t, time<=$s, value == 0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

rule "ThirdPose --> Clip(IsAtSecond)"
	when
		$e: ThirdPose( $s: start )
		$f: IsAtSecond()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent == $f, time>$t, time<=$s, value == 0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

rule "ThirdPose --> Clip(IsAtLast)"
	when
		$e: ThirdPose( $s: start )
		$f: IsAtLast()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent == $f, time>$t, time<=$s, value == 0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

//Last Pose ************************************************************************************************
rule "LastPose --> Sample(IsAtLast)"
	when
		$e: LastPose( $s: start, $v: value )
		$f: IsAtLast()
	then
//		System.out.println("************insert Sample IsAtLast value: " + $v + ", start: " + $s);
		insert(new Sample($e, $f, $v, $s));
end

rule "LastPose --> Clip(IsAtFirst)"
	when
		$e: LastPose( $s: start )
		$f: IsAtFirst()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent == $f, time>$t, time<=$s, value == 0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

rule "LastPose --> Clip(IsAtSecond)"
	when
		$e: LastPose( $s: start )
		$f: IsAtSecond()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent == $f, time>$t, time<=$s, value == 0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

rule "LastPose --> Clip(IsAtThird)"
	when
		$e: ThirdPose( $s: start )
		$f: IsAtThird()
		$m: MVI( fluent == $f, $v: value > 0, $t: start<$s, $s <= length + start )
		not Sample( fluent == $f, time>$t, time<=$s, value == 0 )
	then
//		System.out.println($e + " DECLIPPA " + $m);
		insert(new Sample($e, $f, (double) 0.0, $s));
end

//
//Harry up *************************************************
rule "Set Alert --> new Sample(HurryUp)"
	when
		$e: DeclipAlert( $s: start, $v: value )
		$f: HurryUp()
	then
//		System.out.println("**********insert NEW Sample HurryUp value: " + $v + ", start: " + $s);
		insert(new Sample($e, $f, $v, $s));
end

rule "FirstPose and not NextPose after x seconds--> Alert"
	when
		$e: FirstPose( $s: start, $v: value )
		$f: HurryUp()
		$m: MVI( fluent == $f, $t: start < $s, length > $s, wait.intValue() <= ($s - $t), value == 1.0 )
	then
//		System.out.println("**********FirstPose insert ALERT: Sample HurryUp value: " + 0.5 + ", start: " + $s);
		insert(new Sample($e, $f, (double) 0.5, $s));
end

rule "SecondPose and not NextPose after x seconds--> Alert"
	when
		$e: SecondPose( $s: start, $v: value )
		$f: HurryUp()
		$m: MVI( fluent == $f, $t: start < $s, length > $s, wait.intValue() <= ($s - $t), value == 1.0 )
	then
//		System.out.println("**********SecondPose insert ALERT: Sample HurryUp value: " + 0.5 + ", start: " + $s);
		insert(new Sample($e, $f, (double) 0.5, $s));
end

rule "ThirdPose and not NextPose after x seconds--> Alert"
	when
		$e: ThirdPose( $s: start, $v: value )
		$f: HurryUp()
		$m: MVI( fluent == $f, $t: start < $s, length > $s, wait.intValue() <= ($s - $t), value == 1.0 )
	then
//		System.out.println("**********ThirdPose insert ALERT: Sample HurryUp value: " + 0.5 + ", start: " + $s);
		insert(new Sample($e, $f, (double) 0.5, $s));
end

rule "LastPose and not NextPose after x seconds--> Alert"
	when
		$e: LastPose( $s: start, $v: value )
		$f: HurryUp()
		$m: MVI( fluent == $f, $t: start < $s, length > $s, wait.intValue() <= ($s - $t), value == 1.0 )
	then
//		System.out.println("**********LastPose insert ALERT: Sample HurryUp value: " + 0.5 + ", start: " + $s);
		insert(new Sample($e, $f, (double) 0.5, $s));
end

//Repetition ***************************************************
rule "Have a repetition (2 steps)"
no-loop true
salience -1
	when
		$e: LastPose( $t1: start, $v1: value > 0 )
		
		$f: IsAtFirst()
		$ss: Sample( fluent==$f, $t2: time<$t1, $v2: value > 0 )
		not Sample( time < $t1 && > $t2, value > 0 )
		
		$ff: Repetition()
	then
		
		Double average = ($v1+$v2)/2;
		System.out.println("Have a repetition of TWO steps! ----> " + average);
		
		insert(new Sample(null, $ff, average, $t1));
end

rule "Have first intermediate of a repetition"
no-loop true
salience -1
	when
		$e: SecondPose( $t1: start, $v1: value > 0 )
		
		$f: IsAtFirst()
		$ss: Sample( fluent==$f, $t2: time<$t1, $v2: value > 0 )
		not Sample( time < $t1 && > $t2, value > 0 )
		
		$ff: FirstIntermediate()
	then
		System.out.println("Have the first intermediate...");
		
		Double sum = ($v1+$v2)/100;
		
		insert(new Sample(null, $ff, sum, $t1));
end

rule "Have a repetition (3 steps)"
no-loop true
salience -1
	when
		$e: LastPose( $t1: start, $v1: value > 0 )
		
		$f: FirstIntermediate()
		$ss: Sample( fluent==$f, $t2: time<$t1, $v2: value > 0 )
		not Sample( time < $t1 && > $t2, value > 0 )
		
		$ff: Repetition()
	then
		
		Double average = ($v1+($v2*100))/3;
		
		System.out.println("Have a repetition of THREE steps! ----> " + average);
		
		insert(new Sample(null, $ff, average, $t1));
		insert(new Sample(null, $f, (double) 0.0, $t1));
end

rule "Have second intermediate of a repetition"
no-loop true
salience -1
	when
		$e: ThirdPose( $t1: start, $v1: value > 0 )
		
		$f: IsAtSecond()
		$ss: Sample( fluent==$f, $t2: time<$t1, $v2: value > 0 )
		not Sample( time < $t1 && > $t2, value > 0 )
		
		$fff: FirstIntermediate()
		$ff: SecondIntermediate()
	then
		System.out.println("Have the second intermediate...");
		
		Double sum = ($v1+$v2)/100;
		
		insert(new Sample(null, $ff, sum, $t1));
		insert(new Sample(null, $fff, (double) 0.0, $t1));
end

rule "Have a repetition (4 steps)"
no-loop true
salience -1
	when
		$e: LastPose( $t1: start, $v1: value > 0 )
		
		$f: SecondIntermediate()
		$ss: Sample( fluent==$f, $t2: time<$t1, $v2: value > 0 )
		not Sample( time < $t1 && > $t2, value > 0 )
		
		$fff: SecondIntermediate()
		$ff: Repetition()
	then
		
		Double average = ($v1+($v2*100))/4;
		
		System.out.println("Have a repetition of FOUR steps!---> " + average);
		
		insert(new Sample(null, $ff, average, $t1));
		insert(new Sample(null, $fff, (double) 0.0, $t1));
end

rule "Go for new Repetition"
no-loop true
salience -1
	when
		$e: FirstPose( $t1: start, $v: value > 0 )
		
		$f: IsAtLast()
		$ss: Sample( fluent==$f, $t2: time<$t1, value > 0 )
		not Sample( time < $t1 && > $t2, value > 0 )
		
		$ff: Repetition()
	then
		System.out.println("Go for new repetition!");
		
		insert(new Sample(null, $ff, (double) 0.0, $t1));
end

rule "Reset isAtFirst"
salience -1
	when
		$e: Reset( $t: start )
		
		$f: IsAtFirst()
	then
		System.out.println("Reset of isAtFirst at time: " + $t);
		insert(new Sample($e, $f, 0.0, $t));
end

rule "Reset isAtSecond"
salience -1
	when
		$e: Reset( $t: start )
		
		$f: IsAtSecond()
	then
		System.out.println("Reset of isAtSecond at time: " + $t);
		insert(new Sample($e, $f, 0.0, $t));
end

rule "Reset FirstIntermediate"
salience -1
	when
		$e: Reset( $t: start )
		
		$f: FirstIntermediate()
	then
		System.out.println("Reset of FirstIntermediate at time: " + $t);
		insert(new Sample($e, $f, 0.0, $t));
end

rule "Reset isAtThird"
salience -1
	when
		$e: Reset( $t: start )
		
		$f: IsAtThird()
	then
		System.out.println("Reset of isAtThird at time: " + $t);
		insert(new Sample($e, $f, 0.0, $t));
end

rule "Reset SecondIntermediate"
salience -1
	when
		$e: Reset( $t: start )
		
		$f: SecondIntermediate()
	then
		System.out.println("Reset of SecondIntermediate at time: " + $t);
		insert(new Sample($e, $f, 0.0, $t));
end

rule "Reset isAtLast"
salience -1
	when
		$e: Reset( $t: start )
		
		$f: IsAtLast()
	then
		System.out.println("Reset of isAtLast at time: " + $t);
		insert(new Sample($e, $f, 0.0, $t));
end

//questa non dovrebbe servire:
rule "Reset Repetition"
salience -1
	when
		$e: Reset( $t: start )
		
		$f: Repetition()
	then
		System.out.println("Reset of Repetition at time: " + $t);
		insert(new Sample($e, $f, 0.0, $t));
end